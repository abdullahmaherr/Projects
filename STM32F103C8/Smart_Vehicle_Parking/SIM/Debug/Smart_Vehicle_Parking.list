
Smart_Vehicle_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08001dcc  08001dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee4  08001ee4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ee4  08001ee4  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ee4  08001ee4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee4  08001ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08001eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000004c  08001f38  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08001f38  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000818a  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013f4  00000000  00000000  000281ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000016d0  00000000  00000000  000295f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000390  00000000  00000000  0002acc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003457  00000000  00000000  0002b340  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004349  00000000  00000000  0002e797  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b481  00000000  00000000  00032ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003df61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ba4  00000000  00000000  0003dfdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000004c 	.word	0x2000004c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001db4 	.word	0x08001db4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000050 	.word	0x20000050
 800016c:	08001db4 	.word	0x08001db4

08000170 <HAL_KEYPAD_GPIO_Init>:
/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/

void HAL_KEYPAD_GPIO_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t GPIO_tempConfig;

	/* Setup First Pin Of RAWS as Output*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_ROW_PIN0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_INPUT_PULLDOWN;
 800017a:	2303      	movs	r3, #3
 800017c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_ROW_PORT, &GPIO_tempConfig);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4619      	mov	r1, r3
 8000182:	4827      	ldr	r0, [pc, #156]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 8000184:	f000 fc9e 	bl	8000ac4 <MCAL_GPIO_Init>

	/* Setup 2nd Pin Of RAWS as Output*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_ROW_PIN1;
 8000188:	2302      	movs	r3, #2
 800018a:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_INPUT_PULLDOWN;
 800018c:	2303      	movs	r3, #3
 800018e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_ROW_PORT, &GPIO_tempConfig);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	4822      	ldr	r0, [pc, #136]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 8000196:	f000 fc95 	bl	8000ac4 <MCAL_GPIO_Init>

	/* Setup 3rd Pin Of RAWS as Output*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_ROW_PIN2;
 800019a:	2304      	movs	r3, #4
 800019c:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_INPUT_PULLDOWN;
 800019e:	2303      	movs	r3, #3
 80001a0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_ROW_PORT, &GPIO_tempConfig);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4619      	mov	r1, r3
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 80001a8:	f000 fc8c 	bl	8000ac4 <MCAL_GPIO_Init>

	/* Setup 4th Pin Of RAWS as Output*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_ROW_PIN3;
 80001ac:	2308      	movs	r3, #8
 80001ae:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_INPUT_PULLDOWN;
 80001b0:	2303      	movs	r3, #3
 80001b2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_ROW_PORT, &GPIO_tempConfig);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4819      	ldr	r0, [pc, #100]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 80001ba:	f000 fc83 	bl	8000ac4 <MCAL_GPIO_Init>

	/* Setup First Pin Of COLS as Input*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_COL_PIN0;
 80001be:	2320      	movs	r3, #32
 80001c0:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 80001c2:	2304      	movs	r3, #4
 80001c4:	71bb      	strb	r3, [r7, #6]
	GPIO_tempConfig.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 80001c6:	2301      	movs	r3, #1
 80001c8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_COL_PORT, &GPIO_tempConfig);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4619      	mov	r1, r3
 80001ce:	4814      	ldr	r0, [pc, #80]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 80001d0:	f000 fc78 	bl	8000ac4 <MCAL_GPIO_Init>

	/* Setup 2nd Pin Of COLS as Input*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_COL_PIN1;
 80001d4:	2340      	movs	r3, #64	; 0x40
 80001d6:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 80001d8:	2304      	movs	r3, #4
 80001da:	71bb      	strb	r3, [r7, #6]
	GPIO_tempConfig.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_COL_PORT, &GPIO_tempConfig);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	480e      	ldr	r0, [pc, #56]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 80001e6:	f000 fc6d 	bl	8000ac4 <MCAL_GPIO_Init>

	/* Setup 3rd Pin Of COLS as Input*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_COL_PIN2;
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 80001ee:	2304      	movs	r3, #4
 80001f0:	71bb      	strb	r3, [r7, #6]
	GPIO_tempConfig.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 80001f2:	2301      	movs	r3, #1
 80001f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_COL_PORT, &GPIO_tempConfig);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	4809      	ldr	r0, [pc, #36]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 80001fc:	f000 fc62 	bl	8000ac4 <MCAL_GPIO_Init>

#ifndef KEYPAD_3x4_CONFIG
	/* Setup 4th Pin Of COLS as Input*/
	GPIO_tempConfig.GPIO_PinNumber = KEYPAD_COL_PIN3;
 8000200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000204:	80bb      	strh	r3, [r7, #4]
	GPIO_tempConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 8000206:	2304      	movs	r3, #4
 8000208:	71bb      	strb	r3, [r7, #6]
	GPIO_tempConfig.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 800020a:	2301      	movs	r3, #1
 800020c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_COL_PORT, &GPIO_tempConfig);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4619      	mov	r1, r3
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <HAL_KEYPAD_GPIO_Init+0xb0>)
 8000214:	f000 fc56 	bl	8000ac4 <MCAL_GPIO_Init>
#endif
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <HAL_KEYPAD_PressedKey>:


uint8_t HAL_KEYPAD_PressedKey(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	uint8_t row,col;

	for(col = 0; col < 4; col++)
 800022a:	2300      	movs	r3, #0
 800022c:	71bb      	strb	r3, [r7, #6]
 800022e:	e0aa      	b.n	8000386 <HAL_KEYPAD_PressedKey+0x162>
	{
		MCAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COL_PIN0, LOGIC_HIGH);
 8000230:	2201      	movs	r2, #1
 8000232:	2120      	movs	r1, #32
 8000234:	4858      	ldr	r0, [pc, #352]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 8000236:	f000 fcd6 	bl	8000be6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COL_PIN1, LOGIC_HIGH);
 800023a:	2201      	movs	r2, #1
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	4856      	ldr	r0, [pc, #344]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 8000240:	f000 fcd1 	bl	8000be6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COL_PIN2, LOGIC_HIGH);
 8000244:	2201      	movs	r2, #1
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	4853      	ldr	r0, [pc, #332]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 800024a:	f000 fccc 	bl	8000be6 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_COL_PORT, KEYPAD_COL_PIN3, LOGIC_HIGH);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000254:	4850      	ldr	r0, [pc, #320]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 8000256:	f000 fcc6 	bl	8000be6 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_COL_PORT,Keypad_COL[col], LOGIC_LOW);
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	4a4f      	ldr	r2, [pc, #316]	; (800039c <HAL_KEYPAD_PressedKey+0x178>)
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	b29b      	uxth	r3, r3
 8000264:	2200      	movs	r2, #0
 8000266:	4619      	mov	r1, r3
 8000268:	484b      	ldr	r0, [pc, #300]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 800026a:	f000 fcbc 	bl	8000be6 <MCAL_GPIO_WritePin>

		for(row = 0; row < 4; row++)
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	e081      	b.n	8000378 <HAL_KEYPAD_PressedKey+0x154>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_ROW_PORT, Keypad_ROW[row]) == KEYPAD_BUTTON_PRESSED)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a4a      	ldr	r2, [pc, #296]	; (80003a0 <HAL_KEYPAD_PressedKey+0x17c>)
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	b29b      	uxth	r3, r3
 800027e:	4619      	mov	r1, r3
 8000280:	4845      	ldr	r0, [pc, #276]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 8000282:	f000 fc99 	bl	8000bb8 <MCAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d172      	bne.n	8000372 <HAL_KEYPAD_PressedKey+0x14e>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_ROW_PORT, Keypad_ROW[row]) == KEYPAD_BUTTON_PRESSED);
 800028c:	bf00      	nop
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4a43      	ldr	r2, [pc, #268]	; (80003a0 <HAL_KEYPAD_PressedKey+0x17c>)
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	b29b      	uxth	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	483f      	ldr	r0, [pc, #252]	; (8000398 <HAL_KEYPAD_PressedKey+0x174>)
 800029c:	f000 fc8c 	bl	8000bb8 <MCAL_GPIO_ReadPin>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f3      	beq.n	800028e <HAL_KEYPAD_PressedKey+0x6a>

				switch (col)
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d862      	bhi.n	8000372 <HAL_KEYPAD_PressedKey+0x14e>
 80002ac:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <HAL_KEYPAD_PressedKey+0x90>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002c5 	.word	0x080002c5
 80002b8:	080002ed 	.word	0x080002ed
 80002bc:	08000315 	.word	0x08000315
 80002c0:	0800033d 	.word	0x0800033d
				{
				case 0:
					if (row == 0) return '7';
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d101      	bne.n	80002ce <HAL_KEYPAD_PressedKey+0xaa>
 80002ca:	2337      	movs	r3, #55	; 0x37
 80002cc:	e060      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 1) return '4';
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d101      	bne.n	80002d8 <HAL_KEYPAD_PressedKey+0xb4>
 80002d4:	2334      	movs	r3, #52	; 0x34
 80002d6:	e05b      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 2) return '1';
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d101      	bne.n	80002e2 <HAL_KEYPAD_PressedKey+0xbe>
 80002de:	2331      	movs	r3, #49	; 0x31
 80002e0:	e056      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 3) return '?';
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	d13d      	bne.n	8000364 <HAL_KEYPAD_PressedKey+0x140>
 80002e8:	233f      	movs	r3, #63	; 0x3f
 80002ea:	e051      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					break;

				case 1:
					if (row == 0) return '8';
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d101      	bne.n	80002f6 <HAL_KEYPAD_PressedKey+0xd2>
 80002f2:	2338      	movs	r3, #56	; 0x38
 80002f4:	e04c      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 1) return '5';
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d101      	bne.n	8000300 <HAL_KEYPAD_PressedKey+0xdc>
 80002fc:	2335      	movs	r3, #53	; 0x35
 80002fe:	e047      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 2) return '2';
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d101      	bne.n	800030a <HAL_KEYPAD_PressedKey+0xe6>
 8000306:	2332      	movs	r3, #50	; 0x32
 8000308:	e042      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 3) return '0';
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2b03      	cmp	r3, #3
 800030e:	d12b      	bne.n	8000368 <HAL_KEYPAD_PressedKey+0x144>
 8000310:	2330      	movs	r3, #48	; 0x30
 8000312:	e03d      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					break;

				case 2:
					if (row == 0) return '9';
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d101      	bne.n	800031e <HAL_KEYPAD_PressedKey+0xfa>
 800031a:	2339      	movs	r3, #57	; 0x39
 800031c:	e038      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 1) return '6';
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d101      	bne.n	8000328 <HAL_KEYPAD_PressedKey+0x104>
 8000324:	2336      	movs	r3, #54	; 0x36
 8000326:	e033      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 2) return '3';
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d101      	bne.n	8000332 <HAL_KEYPAD_PressedKey+0x10e>
 800032e:	2333      	movs	r3, #51	; 0x33
 8000330:	e02e      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 3) return '=';
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b03      	cmp	r3, #3
 8000336:	d119      	bne.n	800036c <HAL_KEYPAD_PressedKey+0x148>
 8000338:	233d      	movs	r3, #61	; 0x3d
 800033a:	e029      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					break;

				case 3:
					if (row == 0) return '/';
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d101      	bne.n	8000346 <HAL_KEYPAD_PressedKey+0x122>
 8000342:	232f      	movs	r3, #47	; 0x2f
 8000344:	e024      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 1) return '*';
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d101      	bne.n	8000350 <HAL_KEYPAD_PressedKey+0x12c>
 800034c:	232a      	movs	r3, #42	; 0x2a
 800034e:	e01f      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 2) return '-';
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b02      	cmp	r3, #2
 8000354:	d101      	bne.n	800035a <HAL_KEYPAD_PressedKey+0x136>
 8000356:	232d      	movs	r3, #45	; 0x2d
 8000358:	e01a      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					else if(row == 3) return '+';
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b03      	cmp	r3, #3
 800035e:	d107      	bne.n	8000370 <HAL_KEYPAD_PressedKey+0x14c>
 8000360:	232b      	movs	r3, #43	; 0x2b
 8000362:	e015      	b.n	8000390 <HAL_KEYPAD_PressedKey+0x16c>
					break;
 8000364:	bf00      	nop
 8000366:	e004      	b.n	8000372 <HAL_KEYPAD_PressedKey+0x14e>
					break;
 8000368:	bf00      	nop
 800036a:	e002      	b.n	8000372 <HAL_KEYPAD_PressedKey+0x14e>
					break;
 800036c:	bf00      	nop
 800036e:	e000      	b.n	8000372 <HAL_KEYPAD_PressedKey+0x14e>
					break;
 8000370:	bf00      	nop
		for(row = 0; row < 4; row++)
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	3301      	adds	r3, #1
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b03      	cmp	r3, #3
 800037c:	f67f af7a 	bls.w	8000274 <HAL_KEYPAD_PressedKey+0x50>
	for(col = 0; col < 4; col++)
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	3301      	adds	r3, #1
 8000384:	71bb      	strb	r3, [r7, #6]
 8000386:	79bb      	ldrb	r3, [r7, #6]
 8000388:	2b03      	cmp	r3, #3
 800038a:	f67f af51 	bls.w	8000230 <HAL_KEYPAD_PressedKey+0xc>
				}
			}
		}
	}
	return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40010c00 	.word	0x40010c00
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000010 	.word	0x20000010

080003a4 <LCD_delay>:

/*===============================================================================
 *                      	 Private Function		                             *
 ================================================================================*/

static void LCD_delay(int ms){
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	volatile uint32_t counter =0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
	for(int i =0;i<ms;i++){
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00a      	b.n	80003cc <LCD_delay+0x28>
		for(;counter<1500;counter++);
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3301      	adds	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	f240 52db 	movw	r2, #1499	; 0x5db
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d9f7      	bls.n	80003b6 <LCD_delay+0x12>
	for(int i =0;i<ms;i++){
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3301      	adds	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbf3      	blt.n	80003bc <LCD_delay+0x18>
	}
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr

080003de <LCD_kick>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void LCD_kick(s_LCD_Config_t  * LCD){
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
	//SET_BIT(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.enpin);									//enable pulse
	MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,LOGIC_HIGH);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6818      	ldr	r0, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	88db      	ldrh	r3, [r3, #6]
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	f000 fbf8 	bl	8000be6 <MCAL_GPIO_WritePin>
	LCD_delay(1);
 80003f6:	2001      	movs	r0, #1
 80003f8:	f7ff ffd4 	bl	80003a4 <LCD_delay>
	MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,LOGIC_LOW);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	88db      	ldrh	r3, [r3, #6]
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	f000 fbed 	bl	8000be6 <MCAL_GPIO_WritePin>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD_init>:

void LCD_init(s_LCD_Config_t  *  LCD ){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	//*(LCD->s_LCDCtrlPins.p_DataDireReg) |= (1<<LCD->s_LCDCtrlPins.enpin) | (1<<LCD->s_LCDCtrlPins.rspin) | (1<<LCD->s_LCDCtrlPins.rwpin);
	GPIO_PinConfig_t pin = {LCD->s_LCDCtrlPins.enpin ,GPIO_MODE_OUTPUT_PUSHPULL, GPIO_OUTPUT_SPEED_10M};
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	88db      	ldrh	r3, [r3, #6]
 8000420:	813b      	strh	r3, [r7, #8]
 8000422:	2304      	movs	r3, #4
 8000424:	72bb      	strb	r3, [r7, #10]
 8000426:	2301      	movs	r3, #1
 8000428:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(LCD->s_LCDCtrlPins.GPIOX,&pin);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f107 0208 	add.w	r2, r7, #8
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fb45 	bl	8000ac4 <MCAL_GPIO_Init>
	pin.GPIO_PinNumber = LCD->s_LCDCtrlPins.rspin;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	889b      	ldrh	r3, [r3, #4]
 800043e:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_Init(LCD->s_LCDCtrlPins.GPIOX,&pin);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f107 0208 	add.w	r2, r7, #8
 8000448:	4611      	mov	r1, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fb3a 	bl	8000ac4 <MCAL_GPIO_Init>
	LCD->Ch_Counter = 0;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	74da      	strb	r2, [r3, #19]
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7c9b      	ldrb	r3, [r3, #18]
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d819      	bhi.n	8000492 <LCD_init+0x7e>
	{
		//*(LCD->s_LCDDataPins.p_DataDireReg) |= (0x0F << LCD->s_LCDDataPins.DataPinStart);
		for(uint8_t i =0;i<4;i++){
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e012      	b.n	800048a <LCD_init+0x76>
			pin.GPIO_PinNumber = LCD->s_LCDDataPins.DataPinStart << i;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	899b      	ldrh	r3, [r3, #12]
 8000468:	461a      	mov	r2, r3
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	b29b      	uxth	r3, r3
 8000472:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_Init(LCD->s_LCDDataPins.GPIOX,&pin);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f107 0208 	add.w	r2, r7, #8
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fb20 	bl	8000ac4 <MCAL_GPIO_Init>
		for(uint8_t i =0;i<4;i++){
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	3301      	adds	r3, #1
 8000488:	73fb      	strb	r3, [r7, #15]
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d9e9      	bls.n	8000464 <LCD_init+0x50>
 8000490:	e018      	b.n	80004c4 <LCD_init+0xb0>
		}
	}
	else
	{
		for(uint8_t i =0;i<8;i++){
 8000492:	2300      	movs	r3, #0
 8000494:	73bb      	strb	r3, [r7, #14]
 8000496:	e012      	b.n	80004be <LCD_init+0xaa>
			pin.GPIO_PinNumber = LCD->s_LCDDataPins.DataPinStart << i;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	899b      	ldrh	r3, [r3, #12]
 800049c:	461a      	mov	r2, r3
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_Init(LCD->s_LCDDataPins.GPIOX,&pin);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f107 0208 	add.w	r2, r7, #8
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fb06 	bl	8000ac4 <MCAL_GPIO_Init>
		for(uint8_t i =0;i<8;i++){
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3301      	adds	r3, #1
 80004bc:	73bb      	strb	r3, [r7, #14]
 80004be:	7bbb      	ldrb	r3, [r7, #14]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	d9e9      	bls.n	8000498 <LCD_init+0x84>
		}
	}
	LCD_sendchar(LCD ,RETURN_HOME , COMMAND );
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f000 f82a 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(LCD ,FUNCTION_SET + LCD->e_OperMode , COMMAND );
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7c9b      	ldrb	r3, [r3, #18]
 80004d2:	3320      	adds	r3, #32
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2200      	movs	r2, #0
 80004d8:	4619      	mov	r1, r3
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f821 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(LCD ,DISPLAY_CONTROL + LCD->e_DispCtrl , COMMAND );
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7c5b      	ldrb	r3, [r3, #17]
 80004e4:	3308      	adds	r3, #8
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f000 f818 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(LCD ,ENTRY_MODE_SET + LCD->e_EntryMode , COMMAND );
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7c1b      	ldrb	r3, [r3, #16]
 80004f6:	3304      	adds	r3, #4
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2200      	movs	r2, #0
 80004fc:	4619      	mov	r1, r3
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 f80f 	bl	8000522 <LCD_sendchar>
	LCD_clearscreen(LCD);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f000 f8d8 	bl	80006ba <LCD_clearscreen>
	LCD_returnhome(LCD);
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f000 f8e5 	bl	80006da <LCD_returnhome>
	LCD_sendchar(LCD ,SET_DD_ADDRESS , COMMAND );
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f804 	bl	8000522 <LCD_sendchar>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <LCD_sendchar>:
void LCD_sendchar(s_LCD_Config_t  *  LCD ,unsigned char data ,e_LCDCharType_t e_LCDCharType)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	70fb      	strb	r3, [r7, #3]
 800052e:	4613      	mov	r3, r2
 8000530:	70bb      	strb	r3, [r7, #2]
	LCDIsbusy(LCD);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f8b6 	bl	80006a4 <LCDIsbusy>
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7c9b      	ldrb	r3, [r3, #18]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d846      	bhi.n	80005ce <LCD_sendchar+0xac>
	{
		//void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx,uint16_t Vlaue,uint16_t mask);
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);						// clear the data pins
		//*(LCD->s_LCDDataPins.p_PortReg) = (((data & 0xF0) >> 4) << LCD->s_LCDDataPins.DataPinStart);		//the high nibble
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6898      	ldr	r0, [r3, #8]
				,((data & 0xF0) >> 4)*LCD->s_LCDDataPins.DataPinStart
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	091b      	lsrs	r3, r3, #4
 8000548:	b2db      	uxtb	r3, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	b299      	uxth	r1, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 800055a:	461a      	mov	r2, r3
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	b29b      	uxth	r3, r3
 8000562:	461a      	mov	r2, r3
 8000564:	f000 fb6a 	bl	8000c3c <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 8000568:	78bb      	ldrb	r3, [r7, #2]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d108      	bne.n	8000580 <LCD_sendchar+0x5e>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,LOGIC_LOW);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6818      	ldr	r0, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	889b      	ldrh	r3, [r3, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	4619      	mov	r1, r3
 800057a:	f000 fb34 	bl	8000be6 <MCAL_GPIO_WritePin>
 800057e:	e007      	b.n	8000590 <LCD_sendchar+0x6e>
		else{
			//SET_BIT(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,LOGIC_HIGH);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	889b      	ldrh	r3, [r3, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	f000 fb2b 	bl	8000be6 <MCAL_GPIO_WritePin>
		}

		LCD_kick(LCD);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff ff24 	bl	80003de <LCD_kick>

		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= ((data & 0x0F) << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6898      	ldr	r0, [r3, #8]
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	b29b      	uxth	r3, r3
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	b29b      	uxth	r3, r3
				,(data & 0x0F)*LCD->s_LCDDataPins.DataPinStart
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	b299      	uxth	r1, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005b2:	461a      	mov	r2, r3
 80005b4:	0112      	lsls	r2, r2, #4
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	f000 fb3e 	bl	8000c3c <MCAL_GPIO_WriteGroup>

		LCD_kick(LCD);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff0c 	bl	80003de <LCD_kick>
		LCD_delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff feec 	bl	80003a4 <LCD_delay>
 80005cc:	e028      	b.n	8000620 <LCD_sendchar+0xfe>
	}
	else
	{						//8bit mode
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0xFF << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= (data << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6898      	ldr	r0, [r3, #8]
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	b29b      	uxth	r3, r3
				,(data & 0xFF)*LCD->s_LCDDataPins.DataPinStart
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	b299      	uxth	r1, r3
				,0xFF*LCD->s_LCDDataPins.DataPinStart);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 80005e4:	461a      	mov	r2, r3
 80005e6:	0212      	lsls	r2, r2, #8
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	f000 fb25 	bl	8000c3c <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d108      	bne.n	800060a <LCD_sendchar+0xe8>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,LOGIC_LOW);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	f000 faef 	bl	8000be6 <MCAL_GPIO_WritePin>
 8000608:	e007      	b.n	800061a <LCD_sendchar+0xf8>
		else{
			//SET_BIT(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
			MCAL_GPIO_WritePin(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,LOGIC_HIGH);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	889b      	ldrh	r3, [r3, #4]
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	f000 fae6 	bl	8000be6 <MCAL_GPIO_WritePin>

		}
		LCD_kick(LCD);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fedf 	bl	80003de <LCD_kick>
	}
	if(e_LCDCharType == DATA){
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d122      	bne.n	800066c <LCD_sendchar+0x14a>
		LCD->Ch_Counter ++;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7cdb      	ldrb	r3, [r3, #19]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	74da      	strb	r2, [r3, #19]
			if(LCD->Ch_Counter==LINE_DIGITS)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7cdb      	ldrb	r3, [r3, #19]
 8000636:	2b10      	cmp	r3, #16
 8000638:	d105      	bne.n	8000646 <LCD_sendchar+0x124>
				LCD_gotoxy(LCD,0,1);
 800063a:	2201      	movs	r2, #1
 800063c:	2100      	movs	r1, #0
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f85c 	bl	80006fc <LCD_gotoxy>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
				LCD_gotoxy(LCD,0,2);
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
				LCD_gotoxy(LCD,0,3);
		}
}
 8000644:	e012      	b.n	800066c <LCD_sendchar+0x14a>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7cdb      	ldrb	r3, [r3, #19]
 800064a:	2b20      	cmp	r3, #32
 800064c:	d105      	bne.n	800065a <LCD_sendchar+0x138>
				LCD_gotoxy(LCD,0,2);
 800064e:	2202      	movs	r2, #2
 8000650:	2100      	movs	r1, #0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f852 	bl	80006fc <LCD_gotoxy>
}
 8000658:	e008      	b.n	800066c <LCD_sendchar+0x14a>
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7cdb      	ldrb	r3, [r3, #19]
 800065e:	2b30      	cmp	r3, #48	; 0x30
 8000660:	d104      	bne.n	800066c <LCD_sendchar+0x14a>
				LCD_gotoxy(LCD,0,3);
 8000662:	2203      	movs	r2, #3
 8000664:	2100      	movs	r1, #0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f848 	bl	80006fc <LCD_gotoxy>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <LCD_sendstring>:
void LCD_sendstring(s_LCD_Config_t  * LCD , const char *  data)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	for(;*data != '\0';data++){
 800067e:	e009      	b.n	8000694 <LCD_sendstring+0x20>
		LCD_sendchar(LCD,*data,DATA);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff4a 	bl	8000522 <LCD_sendchar>
	for(;*data != '\0';data++){
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f1      	bne.n	8000680 <LCD_sendstring+0xc>
	}
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <LCDIsbusy>:
void LCDIsbusy(s_LCD_Config_t  * LCD)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	//currently I'm working on reading the actual busy flag
	//for the end of the dev process xD let it simply a delay.
	LCD_delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff fe79 	bl	80003a4 <LCD_delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LCD_clearscreen>:

void LCD_clearscreen(s_LCD_Config_t  * LCD)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , ClEAR_SCREEN , COMMAND );
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff2b 	bl	8000522 <LCD_sendchar>
	LCD->Ch_Counter=0;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	74da      	strb	r2, [r3, #19]
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <LCD_returnhome>:
void LCD_returnhome(s_LCD_Config_t  * LCD)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , RETURN_HOME , COMMAND );
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff1b 	bl	8000522 <LCD_sendchar>
	LCD->Ch_Counter=0;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	74da      	strb	r2, [r3, #19]
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <LCD_gotoxy>:
void LCD_gotoxy(s_LCD_Config_t  * LCD , unsigned char x , unsigned char y)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
 8000708:	4613      	mov	r3, r2
 800070a:	70bb      	strb	r3, [r7, #2]
	uint32_t address;
	switch(y)
 800070c:	78bb      	ldrb	r3, [r7, #2]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d819      	bhi.n	8000746 <LCD_gotoxy+0x4a>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <LCD_gotoxy+0x1c>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000729 	.word	0x08000729
 800071c:	0800072f 	.word	0x0800072f
 8000720:	08000737 	.word	0x08000737
 8000724:	0800073f 	.word	0x0800073f
	{
	case 0:
		address = x;
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	60fb      	str	r3, [r7, #12]
		break;
 800072c:	e00b      	b.n	8000746 <LCD_gotoxy+0x4a>
	case 1:
		address = 0x40+x;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	3340      	adds	r3, #64	; 0x40
 8000732:	60fb      	str	r3, [r7, #12]
		break;
 8000734:	e007      	b.n	8000746 <LCD_gotoxy+0x4a>
	case 2:
		address = 0x14+x;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	3314      	adds	r3, #20
 800073a:	60fb      	str	r3, [r7, #12]
		break;
 800073c:	e003      	b.n	8000746 <LCD_gotoxy+0x4a>
	case 3:
		address = 0x54+x;
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	3354      	adds	r3, #84	; 0x54
 8000742:	60fb      	str	r3, [r7, #12]
		break;
 8000744:	bf00      	nop
	}
	LCD->Ch_Counter=y*LINE_DIGITS+x;
 8000746:	78bb      	ldrb	r3, [r7, #2]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	b2da      	uxtb	r2, r3
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4413      	add	r3, r2
 8000750:	b2da      	uxtb	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	74da      	strb	r2, [r3, #19]
	LCD_sendchar(LCD,SET_DD_ADDRESS+address,COMMAND);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3b80      	subs	r3, #128	; 0x80
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fedd 	bl	8000522 <LCD_sendchar>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <Servo1_Entry_Gate_Init>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void Servo1_Entry_Gate_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PinConfig_t config;
	config.GPIO_PinNumber = GPIO_PIN8;
 8000776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077a:	80bb      	strh	r3, [r7, #4]
	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 800077c:	2304      	movs	r3, #4
 800077e:	71bb      	strb	r3, [r7, #6]
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8000780:	2301      	movs	r3, #1
 8000782:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &config);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <Servo1_Entry_Gate_Init+0x28>)
 800078a:	f000 f99b 	bl	8000ac4 <MCAL_GPIO_Init>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010c00 	.word	0x40010c00

0800079c <Servo1_Entry_Gate>:

void Servo1_Entry_Gate(Gate_State Gate_Status)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	if(Gate_Status == GATE_OPEN)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d110      	bne.n	80007ce <Servo1_Entry_Gate+0x32>
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN8, LOGIC_HIGH);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <Servo1_Entry_Gate+0x60>)
 80007b4:	f000 fa17 	bl	8000be6 <MCAL_GPIO_WritePin>
		Delay_us(500); /* ROTATE TO 0 */
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f000 fbd8 	bl	8000f70 <Delay_us>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN8, LOGIC_LOW);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <Servo1_Entry_Gate+0x60>)
 80007c8:	f000 fa0d 	bl	8000be6 <MCAL_GPIO_WritePin>
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN8, LOGIC_HIGH);
		Delay_us(1488);	/* ROTATE TO 90 */
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN8, LOGIC_LOW);
	}
}
 80007cc:	e012      	b.n	80007f4 <Servo1_Entry_Gate+0x58>
	else if(Gate_Status == GATE_CLOSE)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10f      	bne.n	80007f4 <Servo1_Entry_Gate+0x58>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN8, LOGIC_HIGH);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <Servo1_Entry_Gate+0x60>)
 80007dc:	f000 fa03 	bl	8000be6 <MCAL_GPIO_WritePin>
		Delay_us(1488);	/* ROTATE TO 90 */
 80007e0:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 80007e4:	f000 fbc4 	bl	8000f70 <Delay_us>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN8, LOGIC_LOW);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <Servo1_Entry_Gate+0x60>)
 80007f0:	f000 f9f9 	bl	8000be6 <MCAL_GPIO_WritePin>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40010c00 	.word	0x40010c00

08000800 <Servo2_Exit_Gate_Init>:


void Servo2_Exit_Gate_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_PinConfig_t config;
	config.GPIO_PinNumber = GPIO_PIN9;
 8000806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080a:	80bb      	strh	r3, [r7, #4]
	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 800080c:	2304      	movs	r3, #4
 800080e:	71bb      	strb	r3, [r7, #6]
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8000810:	2301      	movs	r3, #1
 8000812:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &config);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <Servo2_Exit_Gate_Init+0x28>)
 800081a:	f000 f953 	bl	8000ac4 <MCAL_GPIO_Init>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010c00 	.word	0x40010c00

0800082c <Servo2_Exit_Gate>:


void Servo2_Exit_Gate(Gate_State Gate_Status)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	if(Gate_Status == GATE_OPEN)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d110      	bne.n	800085e <Servo2_Exit_Gate+0x32>
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN9, LOGIC_HIGH);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <Servo2_Exit_Gate+0x60>)
 8000844:	f000 f9cf 	bl	8000be6 <MCAL_GPIO_WritePin>
		Delay_us(500);	/* ROTATE TO 0 */
 8000848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084c:	f000 fb90 	bl	8000f70 <Delay_us>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN9, LOGIC_LOW);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <Servo2_Exit_Gate+0x60>)
 8000858:	f000 f9c5 	bl	8000be6 <MCAL_GPIO_WritePin>
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN9, LOGIC_HIGH);
		Delay_us(1488);	/* ROTATE TO 90 */
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN9, LOGIC_LOW);
	}
}
 800085c:	e012      	b.n	8000884 <Servo2_Exit_Gate+0x58>
	else if(Gate_Status == GATE_CLOSE)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10f      	bne.n	8000884 <Servo2_Exit_Gate+0x58>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN9, LOGIC_HIGH);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <Servo2_Exit_Gate+0x60>)
 800086c:	f000 f9bb 	bl	8000be6 <MCAL_GPIO_WritePin>
		Delay_us(1488);	/* ROTATE TO 90 */
 8000870:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000874:	f000 fb7c 	bl	8000f70 <Delay_us>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN9, LOGIC_LOW);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <Servo2_Exit_Gate+0x60>)
 8000880:	f000 f9b1 	bl	8000be6 <MCAL_GPIO_WritePin>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40010c00 	.word	0x40010c00

08000890 <EXTI0_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void EXTI0_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI0);
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <EXTI0_IRQHandler+0x1c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <EXTI0_IRQHandler+0x1c>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[0])();
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <EXTI0_IRQHandler+0x20>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4798      	blx	r3
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010400 	.word	0x40010400
 80008b0:	2000006c 	.word	0x2000006c

080008b4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI1);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <EXTI1_IRQHandler+0x1c>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <EXTI1_IRQHandler+0x1c>)
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[1])();
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <EXTI1_IRQHandler+0x20>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4798      	blx	r3
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010400 	.word	0x40010400
 80008d4:	2000006c 	.word	0x2000006c

080008d8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI2);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <EXTI2_IRQHandler+0x1c>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <EXTI2_IRQHandler+0x1c>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[2])();
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <EXTI2_IRQHandler+0x20>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4798      	blx	r3
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010400 	.word	0x40010400
 80008f8:	2000006c 	.word	0x2000006c

080008fc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI3);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <EXTI3_IRQHandler+0x1c>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <EXTI3_IRQHandler+0x1c>)
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[3])();
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <EXTI3_IRQHandler+0x20>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	4798      	blx	r3
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40010400 	.word	0x40010400
 800091c:	2000006c 	.word	0x2000006c

08000920 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI4);
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <EXTI4_IRQHandler+0x1c>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <EXTI4_IRQHandler+0x1c>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[4])();
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <EXTI4_IRQHandler+0x20>)
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	4798      	blx	r3
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010400 	.word	0x40010400
 8000940:	2000006c 	.word	0x2000006c

08000944 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI5))
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	2b00      	cmp	r3, #0
 8000952:	d009      	beq.n	8000968 <EXTI9_5_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI5);
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4a24      	ldr	r2, [pc, #144]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[5])();
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <EXTI9_5_IRQHandler+0xac>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI9);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[9])();
	}
}
 8000966:	e03e      	b.n	80009e6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI6))
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000970:	2b00      	cmp	r3, #0
 8000972:	d009      	beq.n	8000988 <EXTI9_5_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI6);
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 800097a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[6])();
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <EXTI9_5_IRQHandler+0xac>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4798      	blx	r3
}
 8000986:	e02e      	b.n	80009e6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI7))
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000990:	2b00      	cmp	r3, #0
 8000992:	d009      	beq.n	80009a8 <EXTI9_5_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI7);
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 800099a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[7])();
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <EXTI9_5_IRQHandler+0xac>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	4798      	blx	r3
}
 80009a6:	e01e      	b.n	80009e6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI8))
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <EXTI9_5_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI8);
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[8])();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <EXTI9_5_IRQHandler+0xac>)
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	4798      	blx	r3
}
 80009c6:	e00e      	b.n	80009e6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI9))
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <EXTI9_5_IRQHandler+0xa2>
		SET_BIT(EXTI->PR,EXTI9);
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <EXTI9_5_IRQHandler+0xa8>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[9])();
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <EXTI9_5_IRQHandler+0xac>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	4798      	blx	r3
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010400 	.word	0x40010400
 80009f0:	2000006c 	.word	0x2000006c

080009f4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI10))
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d009      	beq.n	8000a18 <EXTI15_10_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI10);
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[10])();
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <EXTI15_10_IRQHandler+0xcc>)
 8000a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a14:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI15);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[15])();
	}
}
 8000a16:	e04e      	b.n	8000ab6 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI11))
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d009      	beq.n	8000a38 <EXTI15_10_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI11);
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a24      	ldr	r2, [pc, #144]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[11])();
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <EXTI15_10_IRQHandler+0xcc>)
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	4798      	blx	r3
}
 8000a36:	e03e      	b.n	8000ab6 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI12))
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d009      	beq.n	8000a58 <EXTI15_10_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI12);
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a4e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[12])();
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <EXTI15_10_IRQHandler+0xcc>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4798      	blx	r3
}
 8000a56:	e02e      	b.n	8000ab6 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI13))
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d009      	beq.n	8000a78 <EXTI15_10_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI13);
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a6e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[13])();
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <EXTI15_10_IRQHandler+0xcc>)
 8000a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a74:	4798      	blx	r3
}
 8000a76:	e01e      	b.n	8000ab6 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI14))
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d009      	beq.n	8000a98 <EXTI15_10_IRQHandler+0xa4>
		SET_BIT(EXTI->PR,EXTI14);
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[14])();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <EXTI15_10_IRQHandler+0xcc>)
 8000a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a94:	4798      	blx	r3
}
 8000a96:	e00e      	b.n	8000ab6 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI15))
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d008      	beq.n	8000ab6 <EXTI15_10_IRQHandler+0xc2>
		SET_BIT(EXTI->PR,EXTI15);
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <EXTI15_10_IRQHandler+0xc8>)
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aae:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[15])();
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <EXTI15_10_IRQHandler+0xcc>)
 8000ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab4:	4798      	blx	r3
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40010400 	.word	0x40010400
 8000ac0:	2000006c 	.word	0x2000006c

08000ac4 <MCAL_GPIO_Init>:
 * Parameter (in) : GPIOx x Could Be A,B,C,D and E.
 * Parameter (in) : a_PinConfig is Pointer to GPIO_PinConfig_t that Contain Configuration of Pin.
 * Return         : None.
 * Note           : That in LQFP48 GPIOA and GPIOB are fully included, GPIOC and GPIOD Partially Included, GPIOE Not Included*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* p_PinConfig)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	vuint32_t* CRHL = NULL_PTR;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
	uint8_t tempPinConfig = 0; /* Temporary Variable to Assign CRHL by (MODE + CNF) Bits */
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]

	/* Specifies Which Configuration Register Will Be Used (CRL 0>>>7) Or (CRH 8>>>15) */
	CRHL = ((p_PinConfig->GPIO_PinNumber) < GPIO_PIN8)?(&GPIOx->CRL):(&GPIOx->CRH);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	2bff      	cmp	r3, #255	; 0xff
 8000adc:	d801      	bhi.n	8000ae2 <MCAL_GPIO_Init+0x1e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	e001      	b.n	8000ae6 <MCAL_GPIO_Init+0x22>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	60bb      	str	r3, [r7, #8]

	/* Clear Default Value */
	(*CRHL) &= (~((0xF) << GET_PIN_POSITION(p_PinConfig->GPIO_PinNumber)));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f8c2 	bl	8000c76 <GET_PIN_POSITION>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	230f      	movs	r3, #15
 8000af8:	4093      	lsls	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	401a      	ands	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	601a      	str	r2, [r3, #0]

	/* If The Pin Is OUTPUT */
	if((p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PUSHPULL) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OPENDRAIN) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PUSHPULL) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OPENDRAIN))
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	789b      	ldrb	r3, [r3, #2]
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d00b      	beq.n	8000b26 <MCAL_GPIO_Init+0x62>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d007      	beq.n	8000b26 <MCAL_GPIO_Init+0x62>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	789b      	ldrb	r3, [r3, #2]
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d003      	beq.n	8000b26 <MCAL_GPIO_Init+0x62>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	789b      	ldrb	r3, [r3, #2]
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d10e      	bne.n	8000b44 <MCAL_GPIO_Init+0x80>
	{
		/*Macros of OUTPUT MODE Assigned With Values To be Manipulated to get The Values that Set CNFy[1:0] MODEy[1:0] */
		tempPinConfig = ( ( (((p_PinConfig->GPIO_Mode) - 4) << 2) | (p_PinConfig->GPIO_Output_Speed) ) & 0x0F );
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	78db      	ldrb	r3, [r3, #3]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	f003 030f 	and.w	r3, r3, #15
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e027      	b.n	8000b94 <MCAL_GPIO_Init+0xd0>
	}
	else /* Else The Pin Is INPUT */
	{
		if((p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLOATING) || (p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF_FLOATING))
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d003      	beq.n	8000b54 <MCAL_GPIO_Init+0x90>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d102      	bne.n	8000b5a <MCAL_GPIO_Init+0x96>
		{
			/* CNFy[1:0] = 01: Floating input */
			tempPinConfig = ( (((GPIO_MODE_INPUT_FLOATING) <<2) | 0x0 ) & 0x0F );
 8000b54:	2304      	movs	r3, #4
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e01c      	b.n	8000b94 <MCAL_GPIO_Init+0xd0>

		}else if((p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_ANALOG))
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	789b      	ldrb	r3, [r3, #2]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <MCAL_GPIO_Init+0xa4>
		{
			/* CNFy[1:0] = 00: Analog mode */
			tempPinConfig = ( (((GPIO_MODE_INPUT_ANALOG) <<2) | 0x0 ) & 0x0F );
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e015      	b.n	8000b94 <MCAL_GPIO_Init+0xd0>

		}else
		{
			/* CNFy[1:0] = 10: Input with pull-up / pull-down */
			tempPinConfig = ( (((GPIO_MODE_INPUT_PULLUP) <<2) | 0x0 ) & 0x0F );
 8000b68:	2308      	movs	r3, #8
 8000b6a:	73fb      	strb	r3, [r7, #15]

			/*For PULLUP set xODR bit 1 , PULLDOWN set xODR bit 0 */
			if(p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PULLDOWN)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d108      	bne.n	8000b86 <MCAL_GPIO_Init+0xc2>
			{
				(GPIOx->ODR) &= ~(p_PinConfig->GPIO_PinNumber);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	8812      	ldrh	r2, [r2, #0]
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	e006      	b.n	8000b94 <MCAL_GPIO_Init+0xd0>
			}else
			{
				(GPIOx->ODR) |= (p_PinConfig->GPIO_PinNumber);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	8812      	ldrh	r2, [r2, #0]
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
			}
		}
	}

	/* Assign the CRH or CRL With Pin Configuration */
	(*CRHL) |= ( (tempPinConfig) << (GET_PIN_POSITION(p_PinConfig->GPIO_PinNumber)));
 8000b94:	7bfc      	ldrb	r4, [r7, #15]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f86b 	bl	8000c76 <GET_PIN_POSITION>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	fa04 f203 	lsl.w	r2, r4, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}

08000bb8 <MCAL_GPIO_ReadPin>:

}


PinState MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t a_PinNumber)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
	PinState pinValue;

	if(((GPIOx->IDR) & a_PinNumber) != LOGIC_LOW)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <MCAL_GPIO_ReadPin+0x1e>
		pinValue = LOGIC_HIGH;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e001      	b.n	8000bda <MCAL_GPIO_ReadPin+0x22>
	else
		pinValue = LOGIC_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]

	return pinValue;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <MCAL_GPIO_WritePin>:


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t a_PinNumber, PinState a_Logic)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	807b      	strh	r3, [r7, #2]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	707b      	strb	r3, [r7, #1]

	if(LOGIC_HIGH == a_Logic)
 8000bf6:	787b      	ldrb	r3, [r7, #1]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d103      	bne.n	8000c04 <MCAL_GPIO_WritePin+0x1e>
		(GPIOx->BSRR) = (uint32_t)a_PinNumber;
 8000bfc:	887a      	ldrh	r2, [r7, #2]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	611a      	str	r2, [r3, #16]
	else if(LOGIC_LOW == a_Logic)
		(GPIOx->BRR) = (uint32_t)a_PinNumber;
}
 8000c02:	e005      	b.n	8000c10 <MCAL_GPIO_WritePin+0x2a>
	else if(LOGIC_LOW == a_Logic)
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <MCAL_GPIO_WritePin+0x2a>
		(GPIOx->BRR) = (uint32_t)a_PinNumber;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	615a      	str	r2, [r3, #20]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <MCAL_GPIO_TogglePin>:
{
	(GPIOx->ODR) = a_Value;
}

void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t a_PinNumber)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	807b      	strh	r3, [r7, #2]
	(GPIOx->ODR) ^= a_PinNumber;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	405a      	eors	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60da      	str	r2, [r3, #12]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <MCAL_GPIO_WriteGroup>:

void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx, uint16_t a_Value, uint16_t a_Mask)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	803b      	strh	r3, [r7, #0]
	GPIOx->ODR &= ~(a_Mask);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	883a      	ldrh	r2, [r7, #0]
 8000c52:	43d2      	mvns	r2, r2
 8000c54:	401a      	ands	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60da      	str	r2, [r3, #12]
	GPIOx->ODR |= (a_Value & a_Mask);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	8879      	ldrh	r1, [r7, #2]
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	400a      	ands	r2, r1
 8000c64:	b292      	uxth	r2, r2
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	60da      	str	r2, [r3, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <GET_PIN_POSITION>:
/*===============================================================================
 *                        Private Function Definitions                           *
 ================================================================================*/

static uint16_t GET_PIN_POSITION(uint16_t a_PinNumber)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]
	switch(a_PinNumber)
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	d042      	beq.n	8000d0c <GET_PIN_POSITION+0x96>
 8000c86:	2b80      	cmp	r3, #128	; 0x80
 8000c88:	dc11      	bgt.n	8000cae <GET_PIN_POSITION+0x38>
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	d036      	beq.n	8000cfc <GET_PIN_POSITION+0x86>
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	dc06      	bgt.n	8000ca0 <GET_PIN_POSITION+0x2a>
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d02e      	beq.n	8000cf4 <GET_PIN_POSITION+0x7e>
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d02e      	beq.n	8000cf8 <GET_PIN_POSITION+0x82>
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d028      	beq.n	8000cf0 <GET_PIN_POSITION+0x7a>
	case GPIO_PIN7:
	case GPIO_PIN15:
		return 28;
		break;
	default:
		break;
 8000c9e:	e037      	b.n	8000d10 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000ca0:	2b20      	cmp	r3, #32
 8000ca2:	d02f      	beq.n	8000d04 <GET_PIN_POSITION+0x8e>
 8000ca4:	2b40      	cmp	r3, #64	; 0x40
 8000ca6:	d02f      	beq.n	8000d08 <GET_PIN_POSITION+0x92>
 8000ca8:	2b10      	cmp	r3, #16
 8000caa:	d029      	beq.n	8000d00 <GET_PIN_POSITION+0x8a>
		break;
 8000cac:	e030      	b.n	8000d10 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb2:	d023      	beq.n	8000cfc <GET_PIN_POSITION+0x86>
 8000cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb8:	dc09      	bgt.n	8000cce <GET_PIN_POSITION+0x58>
 8000cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cbe:	d019      	beq.n	8000cf4 <GET_PIN_POSITION+0x7e>
 8000cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc4:	d018      	beq.n	8000cf8 <GET_PIN_POSITION+0x82>
 8000cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cca:	d011      	beq.n	8000cf0 <GET_PIN_POSITION+0x7a>
		break;
 8000ccc:	e020      	b.n	8000d10 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd2:	d017      	beq.n	8000d04 <GET_PIN_POSITION+0x8e>
 8000cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd8:	dc03      	bgt.n	8000ce2 <GET_PIN_POSITION+0x6c>
 8000cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cde:	d00f      	beq.n	8000d00 <GET_PIN_POSITION+0x8a>
		break;
 8000ce0:	e016      	b.n	8000d10 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ce6:	d00f      	beq.n	8000d08 <GET_PIN_POSITION+0x92>
 8000ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cec:	d00e      	beq.n	8000d0c <GET_PIN_POSITION+0x96>
		break;
 8000cee:	e00f      	b.n	8000d10 <GET_PIN_POSITION+0x9a>
		return 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e00e      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e00c      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	e00a      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 12;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	e008      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 16;
 8000d00:	2310      	movs	r3, #16
 8000d02:	e006      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 20;
 8000d04:	2314      	movs	r3, #20
 8000d06:	e004      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 24;
 8000d08:	2318      	movs	r3, #24
 8000d0a:	e002      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
		return 28;
 8000d0c:	231c      	movs	r3, #28
 8000d0e:	e000      	b.n	8000d12 <GET_PIN_POSITION+0x9c>
	}
	return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <MCAL_RCC_enableCLK>:
#endif

}

void MCAL_RCC_enableCLK(uint8_t a_BusID, uint8_t a_PeriphID)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	460a      	mov	r2, r1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	71bb      	strb	r3, [r7, #6]
	switch (a_BusID) {
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d00f      	beq.n	8000d52 <MCAL_RCC_enableCLK+0x36>
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d018      	beq.n	8000d68 <MCAL_RCC_enableCLK+0x4c>
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d000      	beq.n	8000d3c <MCAL_RCC_enableCLK+0x20>
		break;
	case RCC_APB2_BUS:
		SET_BIT(RCC->APB2ENR, a_PeriphID);
		break;
	default:
		break;
 8000d3a:	e020      	b.n	8000d7e <MCAL_RCC_enableCLK+0x62>
		SET_BIT(RCC->AHBENR, a_PeriphID);
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MCAL_RCC_enableCLK+0x6c>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	2101      	movs	r1, #1
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <MCAL_RCC_enableCLK+0x6c>)
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6153      	str	r3, [r2, #20]
		break;
 8000d50:	e015      	b.n	8000d7e <MCAL_RCC_enableCLK+0x62>
		SET_BIT(RCC->APB1ENR, a_PeriphID);
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MCAL_RCC_enableCLK+0x6c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	79ba      	ldrb	r2, [r7, #6]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <MCAL_RCC_enableCLK+0x6c>)
 8000d62:	430b      	orrs	r3, r1
 8000d64:	61d3      	str	r3, [r2, #28]
		break;
 8000d66:	e00a      	b.n	8000d7e <MCAL_RCC_enableCLK+0x62>
		SET_BIT(RCC->APB2ENR, a_PeriphID);
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MCAL_RCC_enableCLK+0x6c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	79ba      	ldrb	r2, [r7, #6]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4611      	mov	r1, r2
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <MCAL_RCC_enableCLK+0x6c>)
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6193      	str	r3, [r2, #24]
		break;
 8000d7c:	bf00      	nop
	}
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <MCAL_RCC_getSYSCLK>:
		break;
	}
}

uint32_t MCAL_RCC_getSYSCLK(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	switch (((RCC->CFGR >> 2) & 0b11))/* Read System clock switch status */
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MCAL_RCC_getSYSCLK+0x34>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d006      	beq.n	8000dac <MCAL_RCC_getSYSCLK+0x20>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d302      	bcc.n	8000da8 <MCAL_RCC_getSYSCLK+0x1c>
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d004      	beq.n	8000db0 <MCAL_RCC_getSYSCLK+0x24>
 8000da6:	e005      	b.n	8000db4 <MCAL_RCC_getSYSCLK+0x28>
	{
	case RCC_HSI_CLK:
		return RCC_HSI_CLK_VAL; /* Return HSI Clock Frequency Value */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MCAL_RCC_getSYSCLK+0x38>)
 8000daa:	e004      	b.n	8000db6 <MCAL_RCC_getSYSCLK+0x2a>
		break;
	case RCC_HSE_CLK:
		return RCC_HSE_CLK_VAL;/* To Do */ /* Return HSE Clock Frequency Value */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MCAL_RCC_getSYSCLK+0x3c>)
 8000dae:	e002      	b.n	8000db6 <MCAL_RCC_getSYSCLK+0x2a>
		break;
	case RCC_PLL_CLK:
		return RCC_PLL_CLK_VAL;/* To Do */  /* Return PLL Clock Frequency Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <MCAL_RCC_getSYSCLK+0x3c>)
 8000db2:	e000      	b.n	8000db6 <MCAL_RCC_getSYSCLK+0x2a>
		break;
	default:
		return 0;
 8000db4:	2300      	movs	r3, #0
		break;
	}
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	007a1200 	.word	0x007a1200
 8000dc8:	00f42400 	.word	0x00f42400

08000dcc <MCAL_RCC_getHCLK>:

uint32_t MCAL_RCC_getHCLK(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	/* Divide System Clock Frequency by AHB Prescaler Value */
	return(MCAL_RCC_getSYSCLK() >> AHBPrescaler[((RCC->CFGR >> 4) & 0b1111)]);
 8000dd0:	f7ff ffdc 	bl	8000d8c <MCAL_RCC_getSYSCLK>
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <MCAL_RCC_getHCLK+0x20>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <MCAL_RCC_getHCLK+0x24>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	08001ed4 	.word	0x08001ed4

08000df4 <MCAL_RCC_GetPCLK1>:

uint32_t MCAL_RCC_GetPCLK1(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	/* Divide AHB Clock Frequency by APB1 Prescaler Value */
	return(MCAL_RCC_getHCLK() >> APBPrescaler[((RCC->CFGR >> 8) & 0b111)]);
 8000df8:	f7ff ffe8 	bl	8000dcc <MCAL_RCC_getHCLK>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <MCAL_RCC_GetPCLK1+0x20>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <MCAL_RCC_GetPCLK1+0x24>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	08001ecc 	.word	0x08001ecc

08000e1c <MCAL_RCC_GetPCLK2>:

uint32_t MCAL_RCC_GetPCLK2(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	/* Divide AHB Clock Frequency by APB2 Prescaler Value */
	return(MCAL_RCC_getHCLK() >> APBPrescaler[((RCC->CFGR >> 11) & 0b111)]);
 8000e20:	f7ff ffd4 	bl	8000dcc <MCAL_RCC_getHCLK>
 8000e24:	4601      	mov	r1, r0
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <MCAL_RCC_GetPCLK2+0x20>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	0adb      	lsrs	r3, r3, #11
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <MCAL_RCC_GetPCLK2+0x24>)
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	08001ecc 	.word	0x08001ecc

08000e44 <SPI1_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void SPI1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC IRQ_src;

	/* Read Error Source Flag */
	IRQ_src.RXNE = GET_BIT(SPI1->SR,0);
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <SPI1_IRQHandler+0x6c>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	793b      	ldrb	r3, [r7, #4]
 8000e56:	f362 0300 	bfi	r3, r2, #0, #1
 8000e5a:	713b      	strb	r3, [r7, #4]
	IRQ_src.TXE = GET_BIT(SPI1->SR,1);
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <SPI1_IRQHandler+0x6c>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e6e:	713b      	strb	r3, [r7, #4]
	IRQ_src.MODF = GET_BIT(SPI1->SR,5);
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <SPI1_IRQHandler+0x6c>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	095b      	lsrs	r3, r3, #5
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	f362 1345 	bfi	r3, r2, #5, #1
 8000e82:	713b      	strb	r3, [r7, #4]
	IRQ_src.OVR = GET_BIT(SPI1->SR,6);
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <SPI1_IRQHandler+0x6c>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	793b      	ldrb	r3, [r7, #4]
 8000e92:	f362 1386 	bfi	r3, r2, #6, #1
 8000e96:	713b      	strb	r3, [r7, #4]

	/* Call The ISR CallBack Function */
	if(g_SPI_Config[1].p_SPI_ISR != NULL)
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SPI1_IRQHandler+0x70>)
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <SPI1_IRQHandler+0x64>
		(*g_SPI_Config[0].p_SPI_ISR)(IRQ_src);
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SPI1_IRQHandler+0x70>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	7938      	ldrb	r0, [r7, #4]
 8000ea6:	4798      	blx	r3
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	200000a8 	.word	0x200000a8

08000eb8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	S_SPI_IRQ_SRC IRQ_src;

	/* Read Error Source Flag */
	IRQ_src.RXNE = GET_BIT(SPI1->SR,0);
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <SPI2_IRQHandler+0x6c>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	793b      	ldrb	r3, [r7, #4]
 8000eca:	f362 0300 	bfi	r3, r2, #0, #1
 8000ece:	713b      	strb	r3, [r7, #4]
	IRQ_src.TXE = GET_BIT(SPI1->SR,1);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <SPI2_IRQHandler+0x6c>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	085b      	lsrs	r3, r3, #1
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	f362 0341 	bfi	r3, r2, #1, #1
 8000ee2:	713b      	strb	r3, [r7, #4]
	IRQ_src.MODF = GET_BIT(SPI1->SR,5);
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <SPI2_IRQHandler+0x6c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	095b      	lsrs	r3, r3, #5
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	f362 1345 	bfi	r3, r2, #5, #1
 8000ef6:	713b      	strb	r3, [r7, #4]
	IRQ_src.OVR = GET_BIT(SPI1->SR,6);
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <SPI2_IRQHandler+0x6c>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	099b      	lsrs	r3, r3, #6
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	793b      	ldrb	r3, [r7, #4]
 8000f06:	f362 1386 	bfi	r3, r2, #6, #1
 8000f0a:	713b      	strb	r3, [r7, #4]

	/* Call The ISR CallBack Function */
	if(g_SPI_Config[1].p_SPI_ISR != NULL)
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SPI2_IRQHandler+0x70>)
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <SPI2_IRQHandler+0x64>
		(*g_SPI_Config[1].p_SPI_ISR)(IRQ_src);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SPI2_IRQHandler+0x70>)
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	7938      	ldrb	r0, [r7, #4]
 8000f1a:	4798      	blx	r3
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40013000 	.word	0x40013000
 8000f28:	200000a8 	.word	0x200000a8

08000f2c <Timer2_init>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void Timer2_init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	MCAL_RCC_enableCLK(RCC_APB1_BUS, RCC_TIM2_ID);     /*	Enable CLK	*/
 8000f30:	2100      	movs	r1, #0
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fef2 	bl	8000d1c <MCAL_RCC_enableCLK>

	TIM2_PSC = 7;             /* Prescaler CLK = 1MHZ */
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <Timer2_init+0x38>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        /* 50000 tick (50000 * 10^-6) = 0.05s */
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <Timer2_init+0x3c>)
 8000f40:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f44:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 8000f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 8000f56:	bf00      	nop
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <Timer2_init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0fb      	beq.n	8000f58 <Timer2_init+0x2c>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40000028 	.word	0x40000028
 8000f68:	4000002c 	.word	0x4000002c
 8000f6c:	40000010 	.word	0x40000010

08000f70 <Delay_us>:

void Delay_us(uint32_t delay)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	TIM2_CNT = 0;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <Delay_us+0x24>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<delay);
 8000f7e:	bf00      	nop
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <Delay_us+0x24>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d8fa      	bhi.n	8000f80 <Delay_us+0x10>
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40000024 	.word	0x40000024

08000f98 <Delay_ms>:

void Delay_ms(uint32_t delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < delay; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e006      	b.n	8000fb8 <Delay_ms+0x20>
	{
		Delay_us(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f7ff ffdf 	bl	8000f70 <Delay_us>
	for(i = 0; i < delay; i++)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3f4      	bcc.n	8000faa <Delay_ms+0x12>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MCAL_USART_Init>:
 * Parameter (in) : Instant USARTx Could be 1, 2, and 3.
 * Parameter (in) : Pointer to The Instant Configuration USART.
 * Return         : None.
 * Note           : None.																					*/
void MCAL_USART_Init(USART_TypeDef* USARTx,USART_Config_t* p_USART_Config)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	uint32_t PCLK = 0, Temp_BRR = 0, Temp_CR1 = 0, Temp_CR2 = 0, Temp_CR3 = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]

	if(USART1 == USARTx)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a66      	ldr	r2, [pc, #408]	; (8001184 <MCAL_USART_Init+0x1bc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d111      	bne.n	8001012 <MCAL_USART_Init+0x4a>
	{
		/* Assign Global Configuration Structure */
		g_USART_Config[0] = *p_USART_Config;
 8000fee:	4a66      	ldr	r2, [pc, #408]	; (8001188 <MCAL_USART_Init+0x1c0>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ffe:	e884 0003 	stmia.w	r4, {r0, r1}

		/* Enable Clock For The Peripheral */
		MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_USART1_ID);
 8001002:	210e      	movs	r1, #14
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fe89 	bl	8000d1c <MCAL_RCC_enableCLK>

		/* Get APB2CLK */
		PCLK = MCAL_RCC_GetPCLK2();
 800100a:	f7ff ff07 	bl	8000e1c <MCAL_RCC_GetPCLK2>
 800100e:	61f8      	str	r0, [r7, #28]
 8001010:	e02c      	b.n	800106c <MCAL_USART_Init+0xa4>
	}
	else if(USART2 == USARTx)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a5d      	ldr	r2, [pc, #372]	; (800118c <MCAL_USART_Init+0x1c4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d112      	bne.n	8001040 <MCAL_USART_Init+0x78>
	{
		/* Assign Global Configuration Structure */
		g_USART_Config[1] = *p_USART_Config;
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <MCAL_USART_Init+0x1c0>)
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	f103 0418 	add.w	r4, r3, #24
 8001022:	4615      	mov	r5, r2
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 0003 	ldmia.w	r5, {r0, r1}
 800102c:	e884 0003 	stmia.w	r4, {r0, r1}

		/* Enable Clock For The Peripheral */
		MCAL_RCC_enableCLK(RCC_APB1_BUS, RCC_USART2_ID);
 8001030:	2111      	movs	r1, #17
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff fe72 	bl	8000d1c <MCAL_RCC_enableCLK>

		/* Get APB1CLK */
		PCLK = MCAL_RCC_GetPCLK1();
 8001038:	f7ff fedc 	bl	8000df4 <MCAL_RCC_GetPCLK1>
 800103c:	61f8      	str	r0, [r7, #28]
 800103e:	e015      	b.n	800106c <MCAL_USART_Init+0xa4>
	}
	else if(USART3 == USARTx)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a53      	ldr	r2, [pc, #332]	; (8001190 <MCAL_USART_Init+0x1c8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d111      	bne.n	800106c <MCAL_USART_Init+0xa4>
	{
		/* Assign Global Configuration Structure */
		g_USART_Config[2] = *p_USART_Config;
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <MCAL_USART_Init+0x1c0>)
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001050:	4615      	mov	r5, r2
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	e895 0003 	ldmia.w	r5, {r0, r1}
 800105a:	e884 0003 	stmia.w	r4, {r0, r1}

		/* Enable Clock For The Peripheral */
		MCAL_RCC_enableCLK(RCC_APB1_BUS, RCC_USART3_ID);
 800105e:	2112      	movs	r1, #18
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fe5b 	bl	8000d1c <MCAL_RCC_enableCLK>

		/* Get APB1CLK */
		PCLK = MCAL_RCC_GetPCLK1();
 8001066:	f7ff fec5 	bl	8000df4 <MCAL_RCC_GetPCLK1>
 800106a:	61f8      	str	r0, [r7, #28]
	}

	/* Enable The USART */
	SET_BIT(Temp_CR1,13);
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001072:	61bb      	str	r3, [r7, #24]

	/* Enable USART TX/RX */
	Temp_CR1 |= (p_USART_Config->USART_Mode);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]

	/* Configure The USART Word Length */
	Temp_CR1 |= (p_USART_Config->USART_WordLength);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	891b      	ldrh	r3, [r3, #8]
 8001084:	461a      	mov	r2, r3
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]

	/* Configure The USART Parity Bit */
	Temp_CR1 |= (p_USART_Config->USART_ParityBit);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	899b      	ldrh	r3, [r3, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

	/* Configure The USART Stop Bits */
	Temp_CR2 |= (p_USART_Config->USART_StopBits);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	895b      	ldrh	r3, [r3, #10]
 800109c:	461a      	mov	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

	/* Configure The USART Flow Control */
	Temp_CR3 |= (p_USART_Config->USART_FlowControl);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	89db      	ldrh	r3, [r3, #14]
 80010a8:	461a      	mov	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

	/* Configure The USART Baud Rate */
	Temp_BRR = BRR_REG(PCLK,p_USART_Config->USART_BaudRate);
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	009a      	lsls	r2, r3, #2
 80010ba:	441a      	add	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4a33      	ldr	r2, [pc, #204]	; (8001194 <MCAL_USART_Init+0x1cc>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	0119      	lsls	r1, r3, #4
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	009a      	lsls	r2, r3, #2
 80010da:	441a      	add	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MCAL_USART_Init+0x1cc>)
 80010e8:	fba3 0302 	umull	r0, r3, r3, r2
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	fb00 f303 	mul.w	r3, r0, r3
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <MCAL_USART_Init+0x1cc>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	430b      	orrs	r3, r1
 8001106:	617b      	str	r3, [r7, #20]
	(USARTx->BRR) = Temp_BRR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	609a      	str	r2, [r3, #8]

	if(USART_IRQ_DISABLE != p_USART_Config->USART_IRQ)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	8a1b      	ldrh	r3, [r3, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d025      	beq.n	8001162 <MCAL_USART_Init+0x19a>
	{
		if(USART1 == USARTx)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <MCAL_USART_Init+0x1bc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d106      	bne.n	800112c <MCAL_USART_Init+0x164>
		{
			/* NVIC IRQ Enable  */
			NVIC_USART1_EN();
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MCAL_USART_Init+0x1d0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <MCAL_USART_Init+0x1d0>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e014      	b.n	8001156 <MCAL_USART_Init+0x18e>
		}
		else if(USART2 == USARTx)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <MCAL_USART_Init+0x1c4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d106      	bne.n	8001142 <MCAL_USART_Init+0x17a>
		{
			/* NVIC IRQ Enable  */
			NVIC_USART2_EN();
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MCAL_USART_Init+0x1d0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MCAL_USART_Init+0x1d0>)
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e009      	b.n	8001156 <MCAL_USART_Init+0x18e>
		}
		else if(USART3 == USARTx)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MCAL_USART_Init+0x1c8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d105      	bne.n	8001156 <MCAL_USART_Init+0x18e>
		{
			/* NVIC IRQ Enable  */
			NVIC_USART3_EN();
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MCAL_USART_Init+0x1d0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MCAL_USART_Init+0x1d0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6013      	str	r3, [r2, #0]
		}
		/* IRQ MASK Enable */
		Temp_CR1 |= (p_USART_Config->USART_IRQ);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	8a1b      	ldrh	r3, [r3, #16]
 800115a:	461a      	mov	r2, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
	}

	/* Configure The GPIO Pins */
	MCAL_USART_GPIO_PinConfig(USARTx);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f940 	bl	80013e8 <MCAL_USART_GPIO_PinConfig>

	/* Assign Control Registers */
	(USARTx->CR3) = Temp_CR3;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	615a      	str	r2, [r3, #20]
	(USARTx->CR2) = Temp_CR2;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	611a      	str	r2, [r3, #16]
	(USARTx->CR1) = Temp_CR1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	60da      	str	r2, [r3, #12]
}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bdb0      	pop	{r4, r5, r7, pc}
 8001182:	bf00      	nop
 8001184:	40013800 	.word	0x40013800
 8001188:	200000d8 	.word	0x200000d8
 800118c:	40004400 	.word	0x40004400
 8001190:	40004800 	.word	0x40004800
 8001194:	51eb851f 	.word	0x51eb851f
 8001198:	e000e104 	.word	0xe000e104

0800119c <MCAL_USART_TransmitData>:
 * Parameter (in) : Pointer to The Data Buffer.
 * Parameter (in) : Polling Mechanism State Enable/Disable.
 * Return         : None.
 * Note           : None.																					*/
void MCAL_USART_TransmitData(USART_TypeDef* USARTx, uint16_t* p_Buff, USART_Polling_Mechanism a_PollingEn)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71fb      	strb	r3, [r7, #7]
	if(USART_POLLING_ENABLED == a_PollingEn)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d106      	bne.n	80011be <MCAL_USART_TransmitData+0x22>
		while(BIT_IS_CLEAR(USARTx->SR,7));
 80011b0:	bf00      	nop
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f9      	beq.n	80011b2 <MCAL_USART_TransmitData+0x16>

	if(USART1 == USARTx)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <MCAL_USART_TransmitData+0xc8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d115      	bne.n	80011f2 <MCAL_USART_TransmitData+0x56>
	{
		/* Assign Data Register */
		if(USART_Word_Length_8BITS == g_USART_Config[0].USART_WordLength)
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <MCAL_USART_TransmitData+0xcc>)
 80011c8:	891b      	ldrh	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <MCAL_USART_TransmitData+0x3e>
			USARTx->DR = ( *p_Buff & (uint8_t)0xFF );
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	605a      	str	r2, [r3, #4]
		if(USART_Word_Length_8BITS == g_USART_Config[2].USART_WordLength)
			USARTx->DR = ( *p_Buff & (uint8_t)0xFF );
		else if(USART_Word_Length_9BITS == g_USART_Config[2].USART_WordLength)
			USARTx->DR = ( *p_Buff & (uint16_t)0x1FF );
	}
}
 80011d8:	e03e      	b.n	8001258 <MCAL_USART_TransmitData+0xbc>
		else if(USART_Word_Length_9BITS == g_USART_Config[0].USART_WordLength)
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MCAL_USART_TransmitData+0xcc>)
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e2:	d139      	bne.n	8001258 <MCAL_USART_TransmitData+0xbc>
			USARTx->DR = ( *p_Buff & (uint16_t)0x1FF );
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	605a      	str	r2, [r3, #4]
}
 80011f0:	e032      	b.n	8001258 <MCAL_USART_TransmitData+0xbc>
	else if(USART2 == USARTx)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <MCAL_USART_TransmitData+0xd0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d115      	bne.n	8001226 <MCAL_USART_TransmitData+0x8a>
		if(USART_Word_Length_8BITS == g_USART_Config[1].USART_WordLength)
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MCAL_USART_TransmitData+0xcc>)
 80011fc:	8c1b      	ldrh	r3, [r3, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <MCAL_USART_TransmitData+0x72>
			USARTx->DR = ( *p_Buff & (uint8_t)0xFF );
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	605a      	str	r2, [r3, #4]
}
 800120c:	e024      	b.n	8001258 <MCAL_USART_TransmitData+0xbc>
		else if(USART_Word_Length_9BITS == g_USART_Config[1].USART_WordLength)
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MCAL_USART_TransmitData+0xcc>)
 8001210:	8c1b      	ldrh	r3, [r3, #32]
 8001212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001216:	d11f      	bne.n	8001258 <MCAL_USART_TransmitData+0xbc>
			USARTx->DR = ( *p_Buff & (uint16_t)0x1FF );
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	605a      	str	r2, [r3, #4]
}
 8001224:	e018      	b.n	8001258 <MCAL_USART_TransmitData+0xbc>
	else if(USART3 == USARTx)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <MCAL_USART_TransmitData+0xd4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d114      	bne.n	8001258 <MCAL_USART_TransmitData+0xbc>
		if(USART_Word_Length_8BITS == g_USART_Config[2].USART_WordLength)
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MCAL_USART_TransmitData+0xcc>)
 8001230:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001232:	2b00      	cmp	r3, #0
 8001234:	d105      	bne.n	8001242 <MCAL_USART_TransmitData+0xa6>
			USARTx->DR = ( *p_Buff & (uint8_t)0xFF );
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
}
 8001240:	e00a      	b.n	8001258 <MCAL_USART_TransmitData+0xbc>
		else if(USART_Word_Length_9BITS == g_USART_Config[2].USART_WordLength)
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MCAL_USART_TransmitData+0xcc>)
 8001244:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800124a:	d105      	bne.n	8001258 <MCAL_USART_TransmitData+0xbc>
			USARTx->DR = ( *p_Buff & (uint16_t)0x1FF );
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	605a      	str	r2, [r3, #4]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40013800 	.word	0x40013800
 8001268:	200000d8 	.word	0x200000d8
 800126c:	40004400 	.word	0x40004400
 8001270:	40004800 	.word	0x40004800

08001274 <MCAL_USART_ReceiveData>:
 * Parameter (in) : Pointer to The Data Buffer.
 * Parameter (in) : Polling Mechanism State Enable/Disable.
 * Return         : None.
 * Note           : None.																					*/
void MCAL_USART_ReceiveData(USART_TypeDef* USARTx, uint16_t* p_Buff, USART_Polling_Mechanism a_PollingEn)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	4613      	mov	r3, r2
 8001280:	71fb      	strb	r3, [r7, #7]
	if(USART_POLLING_ENABLED == a_PollingEn)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <MCAL_USART_ReceiveData+0x22>
		while(BIT_IS_CLEAR(USARTx->SR,5));
 8001288:	bf00      	nop
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f9      	beq.n	800128a <MCAL_USART_ReceiveData+0x16>

	if(USART1 == USARTx)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <MCAL_USART_ReceiveData+0x164>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12f      	bne.n	80012fe <MCAL_USART_ReceiveData+0x8a>
	{
		/* Read Data Register */
		if(USART_Word_Length_8BITS == g_USART_Config[0].USART_WordLength)
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 80012a0:	891b      	ldrh	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d114      	bne.n	80012d0 <MCAL_USART_ReceiveData+0x5c>
		{
			if(USART_PARITY_BIT_NONE == g_USART_Config[0].USART_ParityBit)
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d107      	bne.n	80012be <MCAL_USART_ReceiveData+0x4a>
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	801a      	strh	r2, [r3, #0]
				*p_Buff = USARTx->DR;	/* All Bits are Data */
			else
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );	/* 8 Bits are Data */
		}
	}
}
 80012bc:	e086      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
				*p_Buff = ( USARTx->DR & (uint8_t)0x7F );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	801a      	strh	r2, [r3, #0]
}
 80012ce:	e07d      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
		else if(USART_Word_Length_9BITS == g_USART_Config[0].USART_WordLength)
 80012d0:	4b42      	ldr	r3, [pc, #264]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 80012d2:	891b      	ldrh	r3, [r3, #8]
 80012d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d8:	d178      	bne.n	80013cc <MCAL_USART_ReceiveData+0x158>
			if(USART_PARITY_BIT_NONE == g_USART_Config[0].USART_ParityBit)
 80012da:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 80012dc:	899b      	ldrh	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <MCAL_USART_ReceiveData+0x7a>
				*p_Buff = USARTx->DR;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	801a      	strh	r2, [r3, #0]
}
 80012ec:	e06e      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	801a      	strh	r2, [r3, #0]
}
 80012fc:	e066      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
	else if(USART2 == USARTx)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <MCAL_USART_ReceiveData+0x16c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12f      	bne.n	8001366 <MCAL_USART_ReceiveData+0xf2>
		if(USART_Word_Length_8BITS == g_USART_Config[1].USART_WordLength)
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 8001308:	8c1b      	ldrh	r3, [r3, #32]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d114      	bne.n	8001338 <MCAL_USART_ReceiveData+0xc4>
			if(USART_PARITY_BIT_NONE == g_USART_Config[1].USART_ParityBit)
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 8001310:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001312:	2b00      	cmp	r3, #0
 8001314:	d107      	bne.n	8001326 <MCAL_USART_ReceiveData+0xb2>
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	b29b      	uxth	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	b29a      	uxth	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	e052      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
				*p_Buff = ( USARTx->DR & (uint8_t)0x7F );
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	b29b      	uxth	r3, r3
 800132c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001330:	b29a      	uxth	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	801a      	strh	r2, [r3, #0]
}
 8001336:	e049      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
		else if(USART_Word_Length_9BITS == g_USART_Config[1].USART_WordLength)
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 800133a:	8c1b      	ldrh	r3, [r3, #32]
 800133c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001340:	d144      	bne.n	80013cc <MCAL_USART_ReceiveData+0x158>
			if(USART_PARITY_BIT_NONE == g_USART_Config[1].USART_ParityBit)
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 8001344:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <MCAL_USART_ReceiveData+0xe2>
				*p_Buff = USARTx->DR;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	b29a      	uxth	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	801a      	strh	r2, [r3, #0]
}
 8001354:	e03a      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	b29a      	uxth	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	801a      	strh	r2, [r3, #0]
}
 8001364:	e032      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
	else if(USART3 == USARTx)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <MCAL_USART_ReceiveData+0x170>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12e      	bne.n	80013cc <MCAL_USART_ReceiveData+0x158>
		if(USART_Word_Length_8BITS == g_USART_Config[2].USART_WordLength)
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 8001370:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001372:	2b00      	cmp	r3, #0
 8001374:	d114      	bne.n	80013a0 <MCAL_USART_ReceiveData+0x12c>
			if(USART_PARITY_BIT_NONE == g_USART_Config[2].USART_ParityBit)
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 8001378:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800137a:	2b00      	cmp	r3, #0
 800137c:	d107      	bne.n	800138e <MCAL_USART_ReceiveData+0x11a>
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );	/* All 8 Bits are Data */
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	b29b      	uxth	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	801a      	strh	r2, [r3, #0]
}
 800138c:	e01e      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
				*p_Buff = ( USARTx->DR & (uint8_t)0x7F ); 	/* 7 Bits are Data */
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	b29b      	uxth	r3, r3
 8001394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001398:	b29a      	uxth	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	801a      	strh	r2, [r3, #0]
}
 800139e:	e015      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
		else if(USART_Word_Length_9BITS == g_USART_Config[2].USART_WordLength)
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 80013a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80013a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a8:	d110      	bne.n	80013cc <MCAL_USART_ReceiveData+0x158>
			if(USART_PARITY_BIT_NONE == g_USART_Config[2].USART_ParityBit)
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MCAL_USART_ReceiveData+0x168>)
 80013ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <MCAL_USART_ReceiveData+0x14a>
				*p_Buff = USARTx->DR;	/* All Bits are Data */
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	801a      	strh	r2, [r3, #0]
}
 80013bc:	e006      	b.n	80013cc <MCAL_USART_ReceiveData+0x158>
				*p_Buff = ( USARTx->DR & (uint8_t)0xFF );	/* 8 Bits are Data */
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	801a      	strh	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40013800 	.word	0x40013800
 80013dc:	200000d8 	.word	0x200000d8
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40004800 	.word	0x40004800

080013e8 <MCAL_USART_GPIO_PinConfig>:
 * Brief          : Function To Initiate a USARTx GPIO Pins.
 * Parameter (in) : Instant USARTx Could be 1, 2, and 3.
 * Return         : None.
 * Note           : None.																					*/
void MCAL_USART_GPIO_PinConfig(USART_TypeDef* USARTx)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t config;

	if(USART1 == USARTx)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a6f      	ldr	r2, [pc, #444]	; (80015b0 <MCAL_USART_GPIO_PinConfig+0x1c8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d146      	bne.n	8001486 <MCAL_USART_GPIO_PinConfig+0x9e>
	{
		/* GPIOA PIN9 TX */
		config.GPIO_PinNumber = GPIO_PIN9;
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	81bb      	strh	r3, [r7, #12]
		config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PUSHPULL;
 80013fe:	2306      	movs	r3, #6
 8001400:	73bb      	strb	r3, [r7, #14]
		config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &config);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4869      	ldr	r0, [pc, #420]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 800140e:	f7ff fb59 	bl	8000ac4 <MCAL_GPIO_Init>

		/* GPIOA PIN10 RX */
		config.GPIO_PinNumber = GPIO_PIN10;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	81bb      	strh	r3, [r7, #12]
		config.GPIO_Mode = GPIO_MODE_INPUT_AF_FLOATING;
 8001418:	2308      	movs	r3, #8
 800141a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &config);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	4864      	ldr	r0, [pc, #400]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 8001424:	f7ff fb4e 	bl	8000ac4 <MCAL_GPIO_Init>

		/* Configure Control Flow Pins */
		if((USART_FLOW_CONTROL_CTS == g_USART_Config[0].USART_FlowControl) || (USART_FLOW_CONTROL_CTS_RTS == g_USART_Config[0].USART_FlowControl) )
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 800142a:	89db      	ldrh	r3, [r3, #14]
 800142c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001430:	d004      	beq.n	800143c <MCAL_USART_GPIO_PinConfig+0x54>
 8001432:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 8001434:	89db      	ldrh	r3, [r3, #14]
 8001436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800143a:	d10b      	bne.n	8001454 <MCAL_USART_GPIO_PinConfig+0x6c>
		{
			/* GPIOA PIN11 CTS */
			config.GPIO_PinNumber = GPIO_PIN11;
 800143c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001440:	81bb      	strh	r3, [r7, #12]
			config.GPIO_Mode = GPIO_MODE_INPUT_AF_FLOATING;
 8001442:	2308      	movs	r3, #8
 8001444:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &config);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4859      	ldr	r0, [pc, #356]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 800144e:	f7ff fb39 	bl	8000ac4 <MCAL_GPIO_Init>
 8001452:	e0a8      	b.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>

		}else if((USART_FLOW_CONTROL_RTS == g_USART_Config[0].USART_FlowControl) || (USART_FLOW_CONTROL_CTS_RTS == g_USART_Config[0].USART_FlowControl))
 8001454:	4b58      	ldr	r3, [pc, #352]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 8001456:	89db      	ldrh	r3, [r3, #14]
 8001458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800145c:	d005      	beq.n	800146a <MCAL_USART_GPIO_PinConfig+0x82>
 800145e:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 8001460:	89db      	ldrh	r3, [r3, #14]
 8001462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001466:	f040 809e 	bne.w	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
		{
			/* GPIOA PIN12 RTS */
			config.GPIO_PinNumber = GPIO_PIN12;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	81bb      	strh	r3, [r7, #12]
			config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PUSHPULL;
 8001470:	2306      	movs	r3, #6
 8001472:	73bb      	strb	r3, [r7, #14]
			config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &config);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	484d      	ldr	r0, [pc, #308]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 8001480:	f7ff fb20 	bl	8000ac4 <MCAL_GPIO_Init>
			config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &config);
		}

	}
}
 8001484:	e08f      	b.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
	else if(USART2 == USARTx)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4c      	ldr	r2, [pc, #304]	; (80015bc <MCAL_USART_GPIO_PinConfig+0x1d4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d141      	bne.n	8001512 <MCAL_USART_GPIO_PinConfig+0x12a>
		config.GPIO_PinNumber = GPIO_PIN2;
 800148e:	2304      	movs	r3, #4
 8001490:	81bb      	strh	r3, [r7, #12]
		config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PUSHPULL;
 8001492:	2306      	movs	r3, #6
 8001494:	73bb      	strb	r3, [r7, #14]
		config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &config);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4844      	ldr	r0, [pc, #272]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 80014a2:	f7ff fb0f 	bl	8000ac4 <MCAL_GPIO_Init>
		config.GPIO_PinNumber = GPIO_PIN3;
 80014a6:	2308      	movs	r3, #8
 80014a8:	81bb      	strh	r3, [r7, #12]
		config.GPIO_Mode = GPIO_MODE_INPUT_AF_FLOATING;
 80014aa:	2308      	movs	r3, #8
 80014ac:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &config);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	483f      	ldr	r0, [pc, #252]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 80014b6:	f7ff fb05 	bl	8000ac4 <MCAL_GPIO_Init>
		if((USART_FLOW_CONTROL_CTS == g_USART_Config[1].USART_FlowControl) || (USART_FLOW_CONTROL_CTS_RTS == g_USART_Config[1].USART_FlowControl) )
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 80014bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c2:	d004      	beq.n	80014ce <MCAL_USART_GPIO_PinConfig+0xe6>
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 80014c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014cc:	d10a      	bne.n	80014e4 <MCAL_USART_GPIO_PinConfig+0xfc>
			config.GPIO_PinNumber = GPIO_PIN0;
 80014ce:	2301      	movs	r3, #1
 80014d0:	81bb      	strh	r3, [r7, #12]
			config.GPIO_Mode = GPIO_MODE_INPUT_AF_FLOATING;
 80014d2:	2308      	movs	r3, #8
 80014d4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &config);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4835      	ldr	r0, [pc, #212]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 80014de:	f7ff faf1 	bl	8000ac4 <MCAL_GPIO_Init>
 80014e2:	e060      	b.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
		}else if((USART_FLOW_CONTROL_RTS == g_USART_Config[1].USART_FlowControl) || (USART_FLOW_CONTROL_CTS_RTS == g_USART_Config[1].USART_FlowControl))
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 80014e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ec:	d004      	beq.n	80014f8 <MCAL_USART_GPIO_PinConfig+0x110>
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 80014f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014f6:	d156      	bne.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
			config.GPIO_PinNumber = GPIO_PIN1;
 80014f8:	2302      	movs	r3, #2
 80014fa:	81bb      	strh	r3, [r7, #12]
			config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PUSHPULL;
 80014fc:	2306      	movs	r3, #6
 80014fe:	73bb      	strb	r3, [r7, #14]
			config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &config);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4619      	mov	r1, r3
 800150a:	482a      	ldr	r0, [pc, #168]	; (80015b4 <MCAL_USART_GPIO_PinConfig+0x1cc>)
 800150c:	f7ff fada 	bl	8000ac4 <MCAL_GPIO_Init>
}
 8001510:	e049      	b.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
	else if(USART3 == USARTx)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <MCAL_USART_GPIO_PinConfig+0x1d8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d145      	bne.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
		config.GPIO_PinNumber = GPIO_PIN10;
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	81bb      	strh	r3, [r7, #12]
		config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PUSHPULL;
 8001520:	2306      	movs	r3, #6
 8001522:	73bb      	strb	r3, [r7, #14]
		config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &config);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <MCAL_USART_GPIO_PinConfig+0x1dc>)
 8001530:	f7ff fac8 	bl	8000ac4 <MCAL_GPIO_Init>
		config.GPIO_PinNumber = GPIO_PIN11;
 8001534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001538:	81bb      	strh	r3, [r7, #12]
		config.GPIO_Mode = GPIO_MODE_INPUT_AF_FLOATING;
 800153a:	2308      	movs	r3, #8
 800153c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &config);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <MCAL_USART_GPIO_PinConfig+0x1dc>)
 8001546:	f7ff fabd 	bl	8000ac4 <MCAL_GPIO_Init>
		if((USART_FLOW_CONTROL_CTS == g_USART_Config[2].USART_FlowControl) || (USART_FLOW_CONTROL_CTS_RTS == g_USART_Config[2].USART_FlowControl) )
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 800154c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800154e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001552:	d004      	beq.n	800155e <MCAL_USART_GPIO_PinConfig+0x176>
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 8001556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800155c:	d10b      	bne.n	8001576 <MCAL_USART_GPIO_PinConfig+0x18e>
			config.GPIO_PinNumber = GPIO_PIN13;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	81bb      	strh	r3, [r7, #12]
			config.GPIO_Mode = GPIO_MODE_INPUT_AF_FLOATING;
 8001564:	2308      	movs	r3, #8
 8001566:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &config);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <MCAL_USART_GPIO_PinConfig+0x1dc>)
 8001570:	f7ff faa8 	bl	8000ac4 <MCAL_GPIO_Init>
 8001574:	e017      	b.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
		}else if((USART_FLOW_CONTROL_RTS == g_USART_Config[2].USART_FlowControl) || (USART_FLOW_CONTROL_CTS_RTS == g_USART_Config[2].USART_FlowControl))
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 8001578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800157a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157e:	d004      	beq.n	800158a <MCAL_USART_GPIO_PinConfig+0x1a2>
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MCAL_USART_GPIO_PinConfig+0x1d0>)
 8001582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001588:	d10d      	bne.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
			config.GPIO_PinNumber = GPIO_PIN14;
 800158a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158e:	81bb      	strh	r3, [r7, #12]
			config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PUSHPULL;
 8001590:	2306      	movs	r3, #6
 8001592:	73bb      	strb	r3, [r7, #14]
			config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &config);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <MCAL_USART_GPIO_PinConfig+0x1dc>)
 80015a0:	f7ff fa90 	bl	8000ac4 <MCAL_GPIO_Init>
}
 80015a4:	e7ff      	b.n	80015a6 <MCAL_USART_GPIO_PinConfig+0x1be>
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40010800 	.word	0x40010800
 80015b8:	200000d8 	.word	0x200000d8
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40004800 	.word	0x40004800
 80015c4:	40010c00 	.word	0x40010c00

080015c8 <USART1_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void USART1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	/* Call The ISR CallBack Function */
	if(g_USART_Config[0].p_USART_ISR != NULL)
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <USART1_IRQHandler+0x18>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <USART1_IRQHandler+0x12>
		(*g_USART_Config[0].p_USART_ISR)();
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <USART1_IRQHandler+0x18>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	4798      	blx	r3
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000d8 	.word	0x200000d8

080015e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	/* Call The ISR CallBack Function */
	if(g_USART_Config[1].p_USART_ISR != NULL)
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <USART2_IRQHandler+0x18>)
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <USART2_IRQHandler+0x12>
		(*g_USART_Config[1].p_USART_ISR)();
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <USART2_IRQHandler+0x18>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	4798      	blx	r3
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200000d8 	.word	0x200000d8

08001600 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	/* Call The ISR CallBack Function */
	if(g_USART_Config[2].p_USART_ISR != NULL)
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <USART3_IRQHandler+0x18>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <USART3_IRQHandler+0x12>
		(*g_USART_Config[2].p_USART_ISR)();
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <USART3_IRQHandler+0x18>)
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	4798      	blx	r3
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000d8 	.word	0x200000d8

0800161c <main>:
		FOURBIT_2LINE_7DOT,0
};


int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
	uint32_t i;

	/*==========Enter IDs To Store In Array Pass==========*/
	Store_IDs_From_Admin();
 8001622:	f000 fa9f 	bl	8001b64 <Store_IDs_From_Admin>

	/*Dash Board LCD*/
	LCD_Welcome();
 8001626:	f000 fa07 	bl	8001a38 <LCD_Welcome>
	Delay_ms(200);
 800162a:	20c8      	movs	r0, #200	; 0xc8
 800162c:	f7ff fcb4 	bl	8000f98 <Delay_ms>
	LCD_Display_Empty_Slots();
 8001630:	f000 fa28 	bl	8001a84 <LCD_Display_Empty_Slots>


	while(1)
	{
		if(Available_Slots > '0')
 8001634:	4baf      	ldr	r3, [pc, #700]	; (80018f4 <main+0x2d8>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b30      	cmp	r3, #48	; 0x30
 800163a:	d91b      	bls.n	8001674 <main+0x58>
		{
			LCD_gotoxy(&LCD2, -4, 2);
 800163c:	2202      	movs	r2, #2
 800163e:	21fc      	movs	r1, #252	; 0xfc
 8001640:	48ad      	ldr	r0, [pc, #692]	; (80018f8 <main+0x2dc>)
 8001642:	f7ff f85b 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Put Your ID ");
 8001646:	49ad      	ldr	r1, [pc, #692]	; (80018fc <main+0x2e0>)
 8001648:	48ab      	ldr	r0, [pc, #684]	; (80018f8 <main+0x2dc>)
 800164a:	f7ff f813 	bl	8000674 <LCD_sendstring>
			LCD_gotoxy(&LCD2,-4,3 );
 800164e:	2203      	movs	r2, #3
 8001650:	21fc      	movs	r1, #252	; 0xfc
 8001652:	48a9      	ldr	r0, [pc, #676]	; (80018f8 <main+0x2dc>)
 8001654:	f7ff f852 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Card Reader");
 8001658:	49a9      	ldr	r1, [pc, #676]	; (8001900 <main+0x2e4>)
 800165a:	48a7      	ldr	r0, [pc, #668]	; (80018f8 <main+0x2dc>)
 800165c:	f7ff f80a 	bl	8000674 <LCD_sendstring>
			while((RFID_CARD_ENTER == 0) && (RFID_CARD_EXIT == 0)); /* Wait For ID */
 8001660:	bf00      	nop
 8001662:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <main+0x2e8>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d120      	bne.n	80016ac <main+0x90>
 800166a:	4ba7      	ldr	r3, [pc, #668]	; (8001908 <main+0x2ec>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f7      	beq.n	8001662 <main+0x46>
 8001672:	e01b      	b.n	80016ac <main+0x90>
		}
		else
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8001674:	2200      	movs	r2, #0
 8001676:	210c      	movs	r1, #12
 8001678:	489f      	ldr	r0, [pc, #636]	; (80018f8 <main+0x2dc>)
 800167a:	f7fe ff52 	bl	8000522 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 800167e:	2200      	movs	r2, #0
 8001680:	2101      	movs	r1, #1
 8001682:	489d      	ldr	r0, [pc, #628]	; (80018f8 <main+0x2dc>)
 8001684:	f7fe ff4d 	bl	8000522 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	489a      	ldr	r0, [pc, #616]	; (80018f8 <main+0x2dc>)
 800168e:	f7ff f835 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Parking Is Full");
 8001692:	499e      	ldr	r1, [pc, #632]	; (800190c <main+0x2f0>)
 8001694:	4898      	ldr	r0, [pc, #608]	; (80018f8 <main+0x2dc>)
 8001696:	f7fe ffed 	bl	8000674 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	2100      	movs	r1, #0
 800169e:	4896      	ldr	r0, [pc, #600]	; (80018f8 <main+0x2dc>)
 80016a0:	f7ff f82c 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Entry Not Allowed");
 80016a4:	499a      	ldr	r1, [pc, #616]	; (8001910 <main+0x2f4>)
 80016a6:	4894      	ldr	r0, [pc, #592]	; (80018f8 <main+0x2dc>)
 80016a8:	f7fe ffe4 	bl	8000674 <LCD_sendstring>
		}

		/* Search About ID */
		for( i = 0; i < 3; i++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	e017      	b.n	80016e2 <main+0xc6>
		{
			if(RFID_CARD_ENTER == pass[i] || RFID_CARD_EXIT == pass[i] )
 80016b2:	4a98      	ldr	r2, [pc, #608]	; (8001914 <main+0x2f8>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b91      	ldr	r3, [pc, #580]	; (8001904 <main+0x2e8>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d008      	beq.n	80016d6 <main+0xba>
 80016c4:	4a93      	ldr	r2, [pc, #588]	; (8001914 <main+0x2f8>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b8e      	ldr	r3, [pc, #568]	; (8001908 <main+0x2ec>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d102      	bne.n	80016dc <main+0xc0>
			{
				Search_Done = 1;
 80016d6:	4b90      	ldr	r3, [pc, #576]	; (8001918 <main+0x2fc>)
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < 3; i++)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d9e4      	bls.n	80016b2 <main+0x96>
		}


		/*=====================Enter gate=====================*/

		if((Search_Done == 1) && (RFID_CARD_ENTER != 0) && (Available_Slots > '0'))
 80016e8:	4b8b      	ldr	r3, [pc, #556]	; (8001918 <main+0x2fc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d157      	bne.n	80017a0 <main+0x184>
 80016f0:	4b84      	ldr	r3, [pc, #528]	; (8001904 <main+0x2e8>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d053      	beq.n	80017a0 <main+0x184>
 80016f8:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <main+0x2d8>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b30      	cmp	r3, #48	; 0x30
 80016fe:	d94f      	bls.n	80017a0 <main+0x184>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8001700:	2200      	movs	r2, #0
 8001702:	210c      	movs	r1, #12
 8001704:	487c      	ldr	r0, [pc, #496]	; (80018f8 <main+0x2dc>)
 8001706:	f7fe ff0c 	bl	8000522 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 800170a:	2200      	movs	r2, #0
 800170c:	2101      	movs	r1, #1
 800170e:	487a      	ldr	r0, [pc, #488]	; (80018f8 <main+0x2dc>)
 8001710:	f7fe ff07 	bl	8000522 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	4877      	ldr	r0, [pc, #476]	; (80018f8 <main+0x2dc>)
 800171a:	f7fe ffef 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Right");
 800171e:	497f      	ldr	r1, [pc, #508]	; (800191c <main+0x300>)
 8001720:	4875      	ldr	r0, [pc, #468]	; (80018f8 <main+0x2dc>)
 8001722:	f7fe ffa7 	bl	8000674 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 8001726:	2201      	movs	r2, #1
 8001728:	2100      	movs	r1, #0
 800172a:	4873      	ldr	r0, [pc, #460]	; (80018f8 <main+0x2dc>)
 800172c:	f7fe ffe6 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Entry gate Opens");
 8001730:	497b      	ldr	r1, [pc, #492]	; (8001920 <main+0x304>)
 8001732:	4871      	ldr	r0, [pc, #452]	; (80018f8 <main+0x2dc>)
 8001734:	f7fe ff9e 	bl	8000674 <LCD_sendstring>

			/* Green Led */
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN11, LOGIC_LOW);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173e:	4879      	ldr	r0, [pc, #484]	; (8001924 <main+0x308>)
 8001740:	f7ff fa51 	bl	8000be6 <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(GATE_OPEN);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff f829 	bl	800079c <Servo1_Entry_Gate>
			Available_Slots--;
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <main+0x2d8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <main+0x2d8>)
 8001754:	701a      	strb	r2, [r3, #0]

			RFID_CARD_ENTER = 0;
 8001756:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <main+0x2e8>)
 8001758:	2200      	movs	r2, #0
 800175a:	801a      	strh	r2, [r3, #0]
			Search_Done = 0;
 800175c:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <main+0x2fc>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]

			Delay_ms(300);
 8001762:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001766:	f7ff fc17 	bl	8000f98 <Delay_ms>

			/* Wait For The Car Fully Entered */
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN7) == LOGIC_HIGH)
 800176a:	e002      	b.n	8001772 <main+0x156>
			{
				Delay_ms(200);
 800176c:	20c8      	movs	r0, #200	; 0xc8
 800176e:	f7ff fc13 	bl	8000f98 <Delay_ms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN7) == LOGIC_HIGH)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	486b      	ldr	r0, [pc, #428]	; (8001924 <main+0x308>)
 8001776:	f7ff fa1f 	bl	8000bb8 <MCAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	2b01      	cmp	r3, #1
 800177e:	d0f5      	beq.n	800176c <main+0x150>
			}

			/* Green Led Off */
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN11, LOGIC_HIGH);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001786:	4867      	ldr	r0, [pc, #412]	; (8001924 <main+0x308>)
 8001788:	f7ff fa2d 	bl	8000be6 <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(GATE_CLOSE);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff f805 	bl	800079c <Servo1_Entry_Gate>

			/*Dash Board LCD*/
			LCD_Welcome();
 8001792:	f000 f951 	bl	8001a38 <LCD_Welcome>
			Delay_ms(200);
 8001796:	20c8      	movs	r0, #200	; 0xc8
 8001798:	f7ff fbfe 	bl	8000f98 <Delay_ms>
			LCD_Display_Empty_Slots();
 800179c:	f000 f972 	bl	8001a84 <LCD_Display_Empty_Slots>

		}

		/*===================Exit gate====================*/
		if((Search_Done == 1) && (RFID_CARD_EXIT != 0) && ( Available_Slots<'3') )
 80017a0:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <main+0x2fc>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d157      	bne.n	8001858 <main+0x23c>
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <main+0x2ec>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d053      	beq.n	8001858 <main+0x23c>
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <main+0x2d8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b32      	cmp	r3, #50	; 0x32
 80017b6:	d84f      	bhi.n	8001858 <main+0x23c>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 80017b8:	2200      	movs	r2, #0
 80017ba:	210c      	movs	r1, #12
 80017bc:	484e      	ldr	r0, [pc, #312]	; (80018f8 <main+0x2dc>)
 80017be:	f7fe feb0 	bl	8000522 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2101      	movs	r1, #1
 80017c6:	484c      	ldr	r0, [pc, #304]	; (80018f8 <main+0x2dc>)
 80017c8:	f7fe feab 	bl	8000522 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	4849      	ldr	r0, [pc, #292]	; (80018f8 <main+0x2dc>)
 80017d2:	f7fe ff93 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"ID Is Right");
 80017d6:	4951      	ldr	r1, [pc, #324]	; (800191c <main+0x300>)
 80017d8:	4847      	ldr	r0, [pc, #284]	; (80018f8 <main+0x2dc>)
 80017da:	f7fe ff4b 	bl	8000674 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	2100      	movs	r1, #0
 80017e2:	4845      	ldr	r0, [pc, #276]	; (80018f8 <main+0x2dc>)
 80017e4:	f7fe ff8a 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Exit Gate Opens");
 80017e8:	494f      	ldr	r1, [pc, #316]	; (8001928 <main+0x30c>)
 80017ea:	4843      	ldr	r0, [pc, #268]	; (80018f8 <main+0x2dc>)
 80017ec:	f7fe ff42 	bl	8000674 <LCD_sendstring>

			/* Green Led */
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN11, LOGIC_LOW);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f6:	484b      	ldr	r0, [pc, #300]	; (8001924 <main+0x308>)
 80017f8:	f7ff f9f5 	bl	8000be6 <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(GATE_OPEN);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff f815 	bl	800082c <Servo2_Exit_Gate>
			Available_Slots++;
 8001802:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <main+0x2d8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <main+0x2d8>)
 800180c:	701a      	strb	r2, [r3, #0]
			Delay_ms(300);
 800180e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001812:	f7ff fbc1 	bl	8000f98 <Delay_ms>

			/* Wait For The Car Fully Exit */
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == LOGIC_HIGH)
 8001816:	e002      	b.n	800181e <main+0x202>
			{
				Delay_ms(200);
 8001818:	20c8      	movs	r0, #200	; 0xc8
 800181a:	f7ff fbbd 	bl	8000f98 <Delay_ms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1) == LOGIC_HIGH)
 800181e:	2102      	movs	r1, #2
 8001820:	4840      	ldr	r0, [pc, #256]	; (8001924 <main+0x308>)
 8001822:	f7ff f9c9 	bl	8000bb8 <MCAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d0f5      	beq.n	8001818 <main+0x1fc>
			}
			/* Green Led Off */
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN11, LOGIC_HIGH);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	483c      	ldr	r0, [pc, #240]	; (8001924 <main+0x308>)
 8001834:	f7ff f9d7 	bl	8000be6 <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(GATE_CLOSE);
 8001838:	2001      	movs	r0, #1
 800183a:	f7fe fff7 	bl	800082c <Servo2_Exit_Gate>

			RFID_CARD_EXIT = 0;
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <main+0x2ec>)
 8001840:	2200      	movs	r2, #0
 8001842:	801a      	strh	r2, [r3, #0]
			Search_Done = 0;
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <main+0x2fc>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]

			/*Dash Board LCD*/
			LCD_Welcome();
 800184a:	f000 f8f5 	bl	8001a38 <LCD_Welcome>
			Delay_ms(200);
 800184e:	20c8      	movs	r0, #200	; 0xc8
 8001850:	f7ff fba2 	bl	8000f98 <Delay_ms>
			LCD_Display_Empty_Slots();
 8001854:	f000 f916 	bl	8001a84 <LCD_Display_Empty_Slots>
		}

		/*==================Wrong Id====================*/
		if(Search_Done == 0 && (RFID_CARD_ENTER >0 || RFID_CARD_EXIT>0) )
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <main+0x2fc>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f aee9 	bne.w	8001634 <main+0x18>
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <main+0x2e8>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d104      	bne.n	8001874 <main+0x258>
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <main+0x2ec>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f43f aee0 	beq.w	8001634 <main+0x18>
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8001874:	2200      	movs	r2, #0
 8001876:	210c      	movs	r1, #12
 8001878:	481f      	ldr	r0, [pc, #124]	; (80018f8 <main+0x2dc>)
 800187a:	f7fe fe52 	bl	8000522 <LCD_sendchar>
			LCD_sendchar(&LCD2, 0x01, COMMAND);
 800187e:	2200      	movs	r2, #0
 8001880:	2101      	movs	r1, #1
 8001882:	481d      	ldr	r0, [pc, #116]	; (80018f8 <main+0x2dc>)
 8001884:	f7fe fe4d 	bl	8000522 <LCD_sendchar>
			LCD_gotoxy(&LCD2, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	481a      	ldr	r0, [pc, #104]	; (80018f8 <main+0x2dc>)
 800188e:	f7fe ff35 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Wrong ID");
 8001892:	4926      	ldr	r1, [pc, #152]	; (800192c <main+0x310>)
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <main+0x2dc>)
 8001896:	f7fe feed 	bl	8000674 <LCD_sendstring>
			LCD_gotoxy(&LCD2, 0, 1);
 800189a:	2201      	movs	r2, #1
 800189c:	2100      	movs	r1, #0
 800189e:	4816      	ldr	r0, [pc, #88]	; (80018f8 <main+0x2dc>)
 80018a0:	f7fe ff2c 	bl	80006fc <LCD_gotoxy>
			LCD_sendstring(&LCD2,"Try Again");
 80018a4:	4922      	ldr	r1, [pc, #136]	; (8001930 <main+0x314>)
 80018a6:	4814      	ldr	r0, [pc, #80]	; (80018f8 <main+0x2dc>)
 80018a8:	f7fe fee4 	bl	8000674 <LCD_sendstring>

			for(i = 0; i < 3; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	e009      	b.n	80018c6 <main+0x2aa>
			{
				/* Red Led Alarm */
				MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN0);
 80018b2:	2101      	movs	r1, #1
 80018b4:	481b      	ldr	r0, [pc, #108]	; (8001924 <main+0x308>)
 80018b6:	f7ff f9b0 	bl	8000c1a <MCAL_GPIO_TogglePin>
				Delay_ms(150);
 80018ba:	2096      	movs	r0, #150	; 0x96
 80018bc:	f7ff fb6c 	bl	8000f98 <Delay_ms>
			for(i = 0; i < 3; i++)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d9f2      	bls.n	80018b2 <main+0x296>
			}
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN0, LOGIC_HIGH);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2101      	movs	r1, #1
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <main+0x308>)
 80018d2:	f7ff f988 	bl	8000be6 <MCAL_GPIO_WritePin>

			/*Dash Board LCD*/
			LCD_Welcome();
 80018d6:	f000 f8af 	bl	8001a38 <LCD_Welcome>
			Delay_ms(150);
 80018da:	2096      	movs	r0, #150	; 0x96
 80018dc:	f7ff fb5c 	bl	8000f98 <Delay_ms>
			LCD_Display_Empty_Slots();
 80018e0:	f000 f8d0 	bl	8001a84 <LCD_Display_Empty_Slots>
			RFID_CARD_EXIT =0;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <main+0x2ec>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]
			RFID_CARD_ENTER =0;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <main+0x2e8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	801a      	strh	r2, [r3, #0]
		if(Available_Slots > '0')
 80018f0:	e6a0      	b.n	8001634 <main+0x18>
 80018f2:	bf00      	nop
 80018f4:	20000020 	.word	0x20000020
 80018f8:	20000038 	.word	0x20000038
 80018fc:	08001dcc 	.word	0x08001dcc
 8001900:	08001ddc 	.word	0x08001ddc
 8001904:	20000120 	.word	0x20000120
 8001908:	20000122 	.word	0x20000122
 800190c:	08001de8 	.word	0x08001de8
 8001910:	08001df8 	.word	0x08001df8
 8001914:	20000068 	.word	0x20000068
 8001918:	2000006b 	.word	0x2000006b
 800191c:	08001e0c 	.word	0x08001e0c
 8001920:	08001e18 	.word	0x08001e18
 8001924:	40010800 	.word	0x40010800
 8001928:	08001e2c 	.word	0x08001e2c
 800192c:	08001e3c 	.word	0x08001e3c
 8001930:	08001e48 	.word	0x08001e48

08001934 <SystemInit>:
	return 0;
}


void SystemInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOA_ID);
 800193a:	2102      	movs	r1, #2
 800193c:	2002      	movs	r0, #2
 800193e:	f7ff f9ed 	bl	8000d1c <MCAL_RCC_enableCLK>
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOB_ID);
 8001942:	2103      	movs	r1, #3
 8001944:	2002      	movs	r0, #2
 8001946:	f7ff f9e9 	bl	8000d1c <MCAL_RCC_enableCLK>
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_AFIO_ID);
 800194a:	2100      	movs	r1, #0
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff f9e5 	bl	8000d1c <MCAL_RCC_enableCLK>

	HAL_KEYPAD_GPIO_Init();
 8001952:	f7fe fc0d 	bl	8000170 <HAL_KEYPAD_GPIO_Init>

	Timer2_init();
 8001956:	f7ff fae9 	bl	8000f2c <Timer2_init>
	Servo1_Entry_Gate_Init();
 800195a:	f7fe ff09 	bl	8000770 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 800195e:	f7fe ff4f 	bl	8000800 <Servo2_Exit_Gate_Init>

	USART_Config_t USARTconfig;
	USARTconfig.USART_BaudRate = USART_BAUD_RATE_115200;
 8001962:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001966:	607b      	str	r3, [r7, #4]
	USARTconfig.USART_FlowControl = USART_FLOW_CONTROL_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	81fb      	strh	r3, [r7, #14]
	USARTconfig.USART_IRQ = USART_IRQ_ENABLE_RXNE;
 800196c:	2320      	movs	r3, #32
 800196e:	823b      	strh	r3, [r7, #16]
	USARTconfig.USART_Mode = USART_MODE_TXRX;
 8001970:	230c      	movs	r3, #12
 8001972:	803b      	strh	r3, [r7, #0]
	USARTconfig.USART_ParityBit = USART_PARITY_BIT_NONE;
 8001974:	2300      	movs	r3, #0
 8001976:	81bb      	strh	r3, [r7, #12]
	USARTconfig.USART_StopBits = USART_STOP_BIT_1;
 8001978:	2300      	movs	r3, #0
 800197a:	817b      	strh	r3, [r7, #10]
	USARTconfig.USART_WordLength = USART_Word_Length_8BITS;
 800197c:	2300      	movs	r3, #0
 800197e:	813b      	strh	r3, [r7, #8]
	USARTconfig.p_USART_ISR = RFID_CARD_ENTER_CallBack;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <SystemInit+0xa4>)
 8001982:	617b      	str	r3, [r7, #20]
	MCAL_USART_Init(USART1, &USARTconfig);
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4814      	ldr	r0, [pc, #80]	; (80019dc <SystemInit+0xa8>)
 800198a:	f7ff fb1d 	bl	8000fc8 <MCAL_USART_Init>


	USARTconfig.USART_BaudRate = USART_BAUD_RATE_115200;
 800198e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001992:	607b      	str	r3, [r7, #4]
	USARTconfig.USART_FlowControl = USART_FLOW_CONTROL_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	81fb      	strh	r3, [r7, #14]
	USARTconfig.USART_IRQ = USART_IRQ_ENABLE_RXNE;
 8001998:	2320      	movs	r3, #32
 800199a:	823b      	strh	r3, [r7, #16]
	USARTconfig.USART_Mode = USART_MODE_TXRX;
 800199c:	230c      	movs	r3, #12
 800199e:	803b      	strh	r3, [r7, #0]
	USARTconfig.USART_ParityBit = USART_PARITY_BIT_NONE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	81bb      	strh	r3, [r7, #12]
	USARTconfig.USART_StopBits = USART_STOP_BIT_1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	817b      	strh	r3, [r7, #10]
	USARTconfig.USART_WordLength = USART_Word_Length_8BITS;
 80019a8:	2300      	movs	r3, #0
 80019aa:	813b      	strh	r3, [r7, #8]
	USARTconfig.p_USART_ISR = RFID_CARD_EXIT_CallBack;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <SystemInit+0xac>)
 80019ae:	617b      	str	r3, [r7, #20]
	MCAL_USART_Init(USART2, &USARTconfig);
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <SystemInit+0xb0>)
 80019b6:	f7ff fb07 	bl	8000fc8 <MCAL_USART_Init>

	LCD_init(&LCD);
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <SystemInit+0xb4>)
 80019bc:	f7fe fd2a 	bl	8000414 <LCD_init>
	LCD_init(&LCD2);
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <SystemInit+0xb8>)
 80019c2:	f7fe fd27 	bl	8000414 <LCD_init>
	LEDs_Init();
 80019c6:	f000 f887 	bl	8001ad8 <LEDs_Init>
	PIRs_Iint();
 80019ca:	f000 f8a5 	bl	8001b18 <PIRs_Iint>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	080019f1 	.word	0x080019f1
 80019dc:	40013800 	.word	0x40013800
 80019e0:	08001a15 	.word	0x08001a15
 80019e4:	40004400 	.word	0x40004400
 80019e8:	20000024 	.word	0x20000024
 80019ec:	20000038 	.word	0x20000038

080019f0 <RFID_CARD_ENTER_CallBack>:


/*Call Back For UART*/
void RFID_CARD_ENTER_CallBack(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	MCAL_USART_ReceiveData(USART1, &RFID_CARD_ENTER, USART_POLLING_DISABLED);
 80019f4:	2200      	movs	r2, #0
 80019f6:	4905      	ldr	r1, [pc, #20]	; (8001a0c <RFID_CARD_ENTER_CallBack+0x1c>)
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <RFID_CARD_ENTER_CallBack+0x20>)
 80019fa:	f7ff fc3b 	bl	8001274 <MCAL_USART_ReceiveData>
	MCAL_USART_TransmitData(USART1, &RFID_CARD_ENTER, USART_POLLING_ENABLED);
 80019fe:	2201      	movs	r2, #1
 8001a00:	4902      	ldr	r1, [pc, #8]	; (8001a0c <RFID_CARD_ENTER_CallBack+0x1c>)
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <RFID_CARD_ENTER_CallBack+0x20>)
 8001a04:	f7ff fbca 	bl	800119c <MCAL_USART_TransmitData>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000120 	.word	0x20000120
 8001a10:	40013800 	.word	0x40013800

08001a14 <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	MCAL_USART_ReceiveData(USART2, &RFID_CARD_EXIT, USART_POLLING_DISABLED);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4905      	ldr	r1, [pc, #20]	; (8001a30 <RFID_CARD_EXIT_CallBack+0x1c>)
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <RFID_CARD_EXIT_CallBack+0x20>)
 8001a1e:	f7ff fc29 	bl	8001274 <MCAL_USART_ReceiveData>
	MCAL_USART_TransmitData(USART2, &RFID_CARD_EXIT, USART_POLLING_ENABLED);
 8001a22:	2201      	movs	r2, #1
 8001a24:	4902      	ldr	r1, [pc, #8]	; (8001a30 <RFID_CARD_EXIT_CallBack+0x1c>)
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <RFID_CARD_EXIT_CallBack+0x20>)
 8001a28:	f7ff fbb8 	bl	800119c <MCAL_USART_TransmitData>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000122 	.word	0x20000122
 8001a34:	40004400 	.word	0x40004400

08001a38 <LCD_Welcome>:



void LCD_Welcome(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	/*Dash Board LCD*/

	LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	210c      	movs	r1, #12
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LCD_Welcome+0x40>)
 8001a42:	f7fe fd6e 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(&LCD2, 0x01, COMMAND);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2101      	movs	r1, #1
 8001a4a:	480b      	ldr	r0, [pc, #44]	; (8001a78 <LCD_Welcome+0x40>)
 8001a4c:	f7fe fd69 	bl	8000522 <LCD_sendchar>
	LCD_gotoxy(&LCD2, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	4808      	ldr	r0, [pc, #32]	; (8001a78 <LCD_Welcome+0x40>)
 8001a56:	f7fe fe51 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Welcome in");
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <LCD_Welcome+0x44>)
 8001a5c:	4806      	ldr	r0, [pc, #24]	; (8001a78 <LCD_Welcome+0x40>)
 8001a5e:	f7fe fe09 	bl	8000674 <LCD_sendstring>
	LCD_gotoxy(&LCD2,0,1 );
 8001a62:	2201      	movs	r2, #1
 8001a64:	2100      	movs	r1, #0
 8001a66:	4804      	ldr	r0, [pc, #16]	; (8001a78 <LCD_Welcome+0x40>)
 8001a68:	f7fe fe48 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Your Name Parking");
 8001a6c:	4904      	ldr	r1, [pc, #16]	; (8001a80 <LCD_Welcome+0x48>)
 8001a6e:	4802      	ldr	r0, [pc, #8]	; (8001a78 <LCD_Welcome+0x40>)
 8001a70:	f7fe fe00 	bl	8000674 <LCD_sendstring>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000038 	.word	0x20000038
 8001a7c:	08001e54 	.word	0x08001e54
 8001a80:	08001e60 	.word	0x08001e60

08001a84 <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	LCD_sendchar(&LCD2, 0x0c, COMMAND);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	210c      	movs	r1, #12
 8001a8c:	480f      	ldr	r0, [pc, #60]	; (8001acc <LCD_Display_Empty_Slots+0x48>)
 8001a8e:	f7fe fd48 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(&LCD2, 0x01, COMMAND);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2101      	movs	r1, #1
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <LCD_Display_Empty_Slots+0x48>)
 8001a98:	f7fe fd43 	bl	8000522 <LCD_sendchar>
	LCD_gotoxy(&LCD2, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <LCD_Display_Empty_Slots+0x48>)
 8001aa2:	f7fe fe2b 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD2,"Empty Slots=");
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <LCD_Display_Empty_Slots+0x4c>)
 8001aa8:	4808      	ldr	r0, [pc, #32]	; (8001acc <LCD_Display_Empty_Slots+0x48>)
 8001aaa:	f7fe fde3 	bl	8000674 <LCD_sendstring>
	LCD_gotoxy(&LCD2, 13, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	210d      	movs	r1, #13
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <LCD_Display_Empty_Slots+0x48>)
 8001ab4:	f7fe fe22 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD2,Available_Slots, DATA);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <LCD_Display_Empty_Slots+0x50>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <LCD_Display_Empty_Slots+0x48>)
 8001ac2:	f7fe fd2e 	bl	8000522 <LCD_sendchar>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000038 	.word	0x20000038
 8001ad0:	08001e74 	.word	0x08001e74
 8001ad4:	20000020 	.word	0x20000020

08001ad8 <LEDs_Init>:

void LEDs_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t config;

	/* RED */
	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	71bb      	strb	r3, [r7, #6]
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
	config.GPIO_PinNumber = GPIO_PIN0;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &config);
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <LEDs_Init+0x3c>)
 8001af0:	f7fe ffe8 	bl	8000ac4 <MCAL_GPIO_Init>

	/* GREEN */
	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 8001af4:	2304      	movs	r3, #4
 8001af6:	71bb      	strb	r3, [r7, #6]
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001af8:	2301      	movs	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
	config.GPIO_PinNumber = GPIO_PIN11;
 8001afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b00:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &config);
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <LEDs_Init+0x3c>)
 8001b08:	f7fe ffdc 	bl	8000ac4 <MCAL_GPIO_Init>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40010800 	.word	0x40010800

08001b18 <PIRs_Iint>:

void PIRs_Iint(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_PinNumber = GPIO_PIN7;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_Mode = GPIO_MODE_INPUT_PULLUP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <PIRs_Iint+0x48>)
 8001b2c:	f7fe ffca 	bl	8000ac4 <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.GPIO_PinNumber = GPIO_PIN1;
 8001b30:	2302      	movs	r3, #2
 8001b32:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_Mode = GPIO_MODE_INPUT_PULLUP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4808      	ldr	r0, [pc, #32]	; (8001b60 <PIRs_Iint+0x48>)
 8001b3e:	f7fe ffc1 	bl	8000ac4 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN0, 1); //make A0 ground
 8001b42:	2201      	movs	r2, #1
 8001b44:	2101      	movs	r1, #1
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <PIRs_Iint+0x48>)
 8001b48:	f7ff f84d 	bl	8000be6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN11, 1); //make A11 ground
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <PIRs_Iint+0x48>)
 8001b54:	f7ff f847 	bl	8000be6 <MCAL_GPIO_WritePin>

}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010800 	.word	0x40010800

08001b64 <Store_IDs_From_Admin>:

void Store_IDs_From_Admin(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	210c      	movs	r1, #12
 8001b6c:	4863      	ldr	r0, [pc, #396]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001b6e:	f7fe fcd8 	bl	8000522 <LCD_sendchar>
	LCD_gotoxy(&LCD, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	4861      	ldr	r0, [pc, #388]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001b78:	f7fe fdc0 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD,"Enter Allowed ID");
 8001b7c:	4960      	ldr	r1, [pc, #384]	; (8001d00 <Store_IDs_From_Admin+0x19c>)
 8001b7e:	485f      	ldr	r0, [pc, #380]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001b80:	f7fe fd78 	bl	8000674 <LCD_sendstring>

	/*First ID*/
	LCD_gotoxy(&LCD, 4, 1);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2104      	movs	r1, #4
 8001b88:	485c      	ldr	r0, [pc, #368]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001b8a:	f7fe fdb7 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD,"First  ID:");
 8001b8e:	495d      	ldr	r1, [pc, #372]	; (8001d04 <Store_IDs_From_Admin+0x1a0>)
 8001b90:	485a      	ldr	r0, [pc, #360]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001b92:	f7fe fd6f 	bl	8000674 <LCD_sendstring>
	while(HAL_KEYPAD_PressedKey() == 0);
 8001b96:	bf00      	nop
 8001b98:	f7fe fb44 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0fa      	beq.n	8001b98 <Store_IDs_From_Admin+0x34>
	pass[0]= HAL_KEYPAD_PressedKey();
 8001ba2:	f7fe fb3f 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001bac:	701a      	strb	r2, [r3, #0]
	while(HAL_KEYPAD_PressedKey() != 0);
 8001bae:	bf00      	nop
 8001bb0:	f7fe fb38 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1fa      	bne.n	8001bb0 <Store_IDs_From_Admin+0x4c>
	LCD_gotoxy(&LCD,14,1 );
 8001bba:	2201      	movs	r2, #1
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	484f      	ldr	r0, [pc, #316]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001bc0:	f7fe fd9c 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[0], DATA);
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	484b      	ldr	r0, [pc, #300]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001bce:	f7fe fca8 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	210c      	movs	r1, #12
 8001bd6:	4849      	ldr	r0, [pc, #292]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001bd8:	f7fe fca3 	bl	8000522 <LCD_sendchar>

	/* Second ID */
	LCD_gotoxy(&LCD, 0, 2);
 8001bdc:	2202      	movs	r2, #2
 8001bde:	2100      	movs	r1, #0
 8001be0:	4846      	ldr	r0, [pc, #280]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001be2:	f7fe fd8b 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD,"Second ID:");
 8001be6:	4949      	ldr	r1, [pc, #292]	; (8001d0c <Store_IDs_From_Admin+0x1a8>)
 8001be8:	4844      	ldr	r0, [pc, #272]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001bea:	f7fe fd43 	bl	8000674 <LCD_sendstring>
	while(HAL_KEYPAD_PressedKey() == 0);
 8001bee:	bf00      	nop
 8001bf0:	f7fe fb18 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0fa      	beq.n	8001bf0 <Store_IDs_From_Admin+0x8c>
	pass[1]=HAL_KEYPAD_PressedKey();
 8001bfa:	f7fe fb13 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001c04:	705a      	strb	r2, [r3, #1]
	while(HAL_KEYPAD_PressedKey() != 0);
 8001c06:	bf00      	nop
 8001c08:	f7fe fb0c 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1fa      	bne.n	8001c08 <Store_IDs_From_Admin+0xa4>
	LCD_gotoxy(&LCD, 10,2);
 8001c12:	2202      	movs	r2, #2
 8001c14:	210a      	movs	r1, #10
 8001c16:	4839      	ldr	r0, [pc, #228]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c18:	f7fe fd70 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[1], DATA);
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	4835      	ldr	r0, [pc, #212]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c26:	f7fe fc7c 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	210c      	movs	r1, #12
 8001c2e:	4833      	ldr	r0, [pc, #204]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c30:	f7fe fc77 	bl	8000522 <LCD_sendchar>

	/* Third ID */
	LCD_gotoxy(&LCD, 0, 3);
 8001c34:	2203      	movs	r2, #3
 8001c36:	2100      	movs	r1, #0
 8001c38:	4830      	ldr	r0, [pc, #192]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c3a:	f7fe fd5f 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD,"Third  ID:");
 8001c3e:	4934      	ldr	r1, [pc, #208]	; (8001d10 <Store_IDs_From_Admin+0x1ac>)
 8001c40:	482e      	ldr	r0, [pc, #184]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c42:	f7fe fd17 	bl	8000674 <LCD_sendstring>
	while(HAL_KEYPAD_PressedKey() == 0);
 8001c46:	bf00      	nop
 8001c48:	f7fe faec 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0fa      	beq.n	8001c48 <Store_IDs_From_Admin+0xe4>
	pass[2]= HAL_KEYPAD_PressedKey();
 8001c52:	f7fe fae7 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001c5c:	709a      	strb	r2, [r3, #2]
	while(HAL_KEYPAD_PressedKey()!= 0);
 8001c5e:	bf00      	nop
 8001c60:	f7fe fae0 	bl	8000224 <HAL_KEYPAD_PressedKey>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1fa      	bne.n	8001c60 <Store_IDs_From_Admin+0xfc>
	LCD_gotoxy(&LCD, 10,3 );
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	210a      	movs	r1, #10
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c70:	f7fe fd44 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[2], DATA);
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	481f      	ldr	r0, [pc, #124]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c7e:	f7fe fc50 	bl	8000522 <LCD_sendchar>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001c82:	2200      	movs	r2, #0
 8001c84:	210c      	movs	r1, #12
 8001c86:	481d      	ldr	r0, [pc, #116]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c88:	f7fe fc4b 	bl	8000522 <LCD_sendchar>

	/* Saved */
	LCD_clearscreen(&LCD);
 8001c8c:	481b      	ldr	r0, [pc, #108]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c8e:	f7fe fd14 	bl	80006ba <LCD_clearscreen>
	LCD_gotoxy(&LCD, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	4819      	ldr	r0, [pc, #100]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001c98:	f7fe fd30 	bl	80006fc <LCD_gotoxy>
	LCD_sendstring(&LCD,"IDs Are Saved");
 8001c9c:	491d      	ldr	r1, [pc, #116]	; (8001d14 <Store_IDs_From_Admin+0x1b0>)
 8001c9e:	4817      	ldr	r0, [pc, #92]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001ca0:	f7fe fce8 	bl	8000674 <LCD_sendstring>
	LCD_sendchar(&LCD, 0x0c, COMMAND);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	210c      	movs	r1, #12
 8001ca8:	4814      	ldr	r0, [pc, #80]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001caa:	f7fe fc3a 	bl	8000522 <LCD_sendchar>

	LCD_gotoxy(&LCD, 0, 1);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001cb4:	f7fe fd22 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[0], DATA);
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001cc2:	f7fe fc2e 	bl	8000522 <LCD_sendchar>
	LCD_gotoxy(&LCD, 2, 1);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2102      	movs	r1, #2
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001ccc:	f7fe fd16 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[1], DATA);
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001cda:	f7fe fc22 	bl	8000522 <LCD_sendchar>
	LCD_gotoxy(&LCD, 4, 1);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001ce4:	f7fe fd0a 	bl	80006fc <LCD_gotoxy>
	LCD_sendchar(&LCD, pass[2], DATA);
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <Store_IDs_From_Admin+0x1a4>)
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <Store_IDs_From_Admin+0x198>)
 8001cf2:	f7fe fc16 	bl	8000522 <LCD_sendchar>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000024 	.word	0x20000024
 8001d00:	08001e84 	.word	0x08001e84
 8001d04:	08001e98 	.word	0x08001e98
 8001d08:	20000068 	.word	0x20000068
 8001d0c:	08001ea4 	.word	0x08001ea4
 8001d10:	08001eb0 	.word	0x08001eb0
 8001d14:	08001ebc 	.word	0x08001ebc

08001d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d1c:	f7ff fe0a 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d22:	490d      	ldr	r1, [pc, #52]	; (8001d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <LoopForever+0xe>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d38:	4c0a      	ldr	r4, [pc, #40]	; (8001d64 <LoopForever+0x16>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d46:	f000 f811 	bl	8001d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7ff fc67 	bl	800161c <main>

08001d4e <LoopForever>:

LoopForever:
    b LoopForever
 8001d4e:	e7fe      	b.n	8001d4e <LoopForever>
  ldr   r0, =_estack
 8001d50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001d5c:	08001eec 	.word	0x08001eec
  ldr r2, =_sbss
 8001d60:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001d64:	20000124 	.word	0x20000124

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <__libc_init_array>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	2500      	movs	r5, #0
 8001d70:	4e0c      	ldr	r6, [pc, #48]	; (8001da4 <__libc_init_array+0x38>)
 8001d72:	4c0d      	ldr	r4, [pc, #52]	; (8001da8 <__libc_init_array+0x3c>)
 8001d74:	1ba4      	subs	r4, r4, r6
 8001d76:	10a4      	asrs	r4, r4, #2
 8001d78:	42a5      	cmp	r5, r4
 8001d7a:	d109      	bne.n	8001d90 <__libc_init_array+0x24>
 8001d7c:	f000 f81a 	bl	8001db4 <_init>
 8001d80:	2500      	movs	r5, #0
 8001d82:	4e0a      	ldr	r6, [pc, #40]	; (8001dac <__libc_init_array+0x40>)
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <__libc_init_array+0x44>)
 8001d86:	1ba4      	subs	r4, r4, r6
 8001d88:	10a4      	asrs	r4, r4, #2
 8001d8a:	42a5      	cmp	r5, r4
 8001d8c:	d105      	bne.n	8001d9a <__libc_init_array+0x2e>
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d94:	4798      	blx	r3
 8001d96:	3501      	adds	r5, #1
 8001d98:	e7ee      	b.n	8001d78 <__libc_init_array+0xc>
 8001d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d9e:	4798      	blx	r3
 8001da0:	3501      	adds	r5, #1
 8001da2:	e7f2      	b.n	8001d8a <__libc_init_array+0x1e>
 8001da4:	08001ee4 	.word	0x08001ee4
 8001da8:	08001ee4 	.word	0x08001ee4
 8001dac:	08001ee4 	.word	0x08001ee4
 8001db0:	08001ee8 	.word	0x08001ee8

08001db4 <_init>:
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	bf00      	nop
 8001db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dba:	bc08      	pop	{r3}
 8001dbc:	469e      	mov	lr, r3
 8001dbe:	4770      	bx	lr

08001dc0 <_fini>:
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	bf00      	nop
 8001dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc6:	bc08      	pop	{r3}
 8001dc8:	469e      	mov	lr, r3
 8001dca:	4770      	bx	lr
