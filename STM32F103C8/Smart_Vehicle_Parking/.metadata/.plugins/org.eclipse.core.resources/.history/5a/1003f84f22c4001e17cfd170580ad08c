/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
#include "stm32f103c8.h"
#include "stm32f103c8_rcc_driver.h"
#include "stm32f103c8_gpio_driver.h"
#include "stm32f103c8_exti_driver.h"
#include "stm32f103c8_usart_driver.h"
#include "stm32f103c8_spi_driver.h"
#include "stm32f103c8_tim_driver.h"

#include "keypad.h"
#include "lcd.h"
#include "servo_motor.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



/*=================Global Variables===============*/
uint16_t RFID_CARD_ENTER;
uint16_t RFID_CARD_EXIT;

uint8_t pass[3] ={0};

uint8_t Available_Slots = '3';
uint8_t Search_Done = 0;


/*=================Function  Prototypes===============*/
void RFID_CARD_ENTER_CallBack(void);
void RFID_CARD_EXIT_CallBack(void);

void LCD_Welcome(void);
void LCD_Display_Empty_Slots(void);
void LEDs_Init(void);
void PIRs_Iint(void);
void Store_IDs_From_Admin(void);



s_LCD_Config_t LCD={

		{ GPIOB, GPIO_PIN11, GPIO_PIN10},
		{GPIOB, GPIO_PIN12},
		NOSHIFT_INCREMENT,
		ONDISP_BLINKCURSOR,
		FOURBIT_2LINE_7DOT,0

};

s_LCD_Config_t LCD2={
		{ GPIOA, GPIO_PIN5, GPIO_PIN6},
		{ GPIOA, GPIO_PIN12 },
		NOSHIFT_INCREMENT,
		ONDISP_BLINKCURSOR,
		FOURBIT_2LINE_7DOT,0
};


int main(void)
{
	uint32_t i;

	/*==========Enter IDs To Store In Array Pass==========*/
	Store_IDs_From_Admin();

	/*Dash Bord LCD*/
	LCD_Welcome();
	Delay_ms(200);
	LCD_Display_Empty_Slots();


	while(1)
	{
		if(Available_Slots > '0')
		{
			LCD_gotoxy(&LCD2, -4, 2);
			LCD_sendstring(&LCD2,"Put Your ID ");
			LCD_gotoxy(&LCD2,-4,3 );
			LCD_sendstring(&LCD2,"Card Reader");
			while((RFID_CARD_ENTER == 0) && (RFID_CARD_EXIT == 0)); /* Wait For ID */
		}
		else
		{
			LCD_sendchar(&LCD2, 0x0c, COMMAND);
			LCD_sendchar(&LCD2, 0x01, COMMAND);
			LCD_gotoxy(&LCD2, 0, 0);
			LCD_sendstring(&LCD2,"Parking Is Full");
			LCD_gotoxy(&LCD2, 0, 1);
			LCD_sendstring(&LCD2,"Entry Not Allowed");
		}

		/* Search About ID */
		for( i = 0; i < 3; i++)
		{
			if(RFID_CARD_ENTER == pass[i] || RFID_CARD_EXIT == pass[i] )
			{
				Search_Done = 1;
			}
		}


		/*=====================Enter gate=====================*/

		/*===================Exit gate====================*/


		/*==================Wrong Id====================*/


	}

	return 0;
}

void SystemInit(void)
{
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOA_ID);
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOB_ID);
	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_AFIO_ID);

	HAL_KEYPAD_GPIO_Init();

	Timer2_init();
	Servo1_Entry_Gate_Init();
	Servo2_Exit_Gate_Init();

	USART_Config_t USARTconfig;
	USARTconfig.USART_BaudRate = USART_BAUD_RATE_115200;
	USARTconfig.USART_FlowControl = USART_FLOW_CONTROL_NONE;
	USARTconfig.USART_IRQ = USART_IRQ_ENABLE_RXNE;
	USARTconfig.USART_Mode = USART_MODE_TXRX;
	USARTconfig.USART_ParityBit = USART_PARITY_BIT_NONE;
	USARTconfig.USART_StopBits = USART_STOP_BIT_1;
	USARTconfig.USART_WordLength = USART_Word_Length_8BITS;
	USARTconfig.p_USART_ISR = RFID_CARD_ENTER_CallBack;
	MCAL_USART_Init(USART1, &USARTconfig);


	USARTconfig.USART_BaudRate = USART_BAUD_RATE_115200;
	USARTconfig.USART_FlowControl = USART_FLOW_CONTROL_NONE;
	USARTconfig.USART_IRQ = USART_IRQ_ENABLE_RXNE;
	USARTconfig.USART_Mode = USART_MODE_TXRX;
	USARTconfig.USART_ParityBit = USART_PARITY_BIT_NONE;
	USARTconfig.USART_StopBits = USART_STOP_BIT_1;
	USARTconfig.USART_WordLength = USART_Word_Length_8BITS;
	USARTconfig.p_USART_ISR = RFID_CARD_EXIT_CallBack;
	MCAL_USART_Init(USART2, &USARTconfig);

	LCD_init(&LCD);
	LCD_init(&LCD2);
	LEDs_Init();
	PIRs_Iint();
}


/*Call Back For UART*/
void RFID_CARD_ENTER_CallBack(void)
{
	MCAL_USART_ReceiveData(USART1, &RFID_CARD_ENTER, USART_POLLING_DISABLED);
	MCAL_USART_TransmitData(USART1, &RFID_CARD_ENTER, USART_POLLING_ENABLED);
}

void RFID_CARD_EXIT_CallBack(void)
{
	MCAL_USART_ReceiveData(USART2, &RFID_CARD_EXIT, USART_POLLING_DISABLED);
	MCAL_USART_TransmitData(USART2, &RFID_CARD_EXIT, USART_POLLING_ENABLED);
}



void LCD_Welcome(void)
{
	/*Dash Bord LCD*/

	LCD_sendchar(&LCD2, 0x0c, COMMAND);
	LCD_sendchar(&LCD2, 0x01, COMMAND);
	LCD_gotoxy(&LCD2, 0, 0);
	LCD_sendstring(&LCD2,"Welcome in");
	LCD_gotoxy(&LCD2,0,1 );
	LCD_sendstring(&LCD2,"Your Name Parking");
}

void LCD_Display_Empty_Slots(void)
{
	LCD_sendchar(&LCD2, 0x0c, COMMAND);
	LCD_sendchar(&LCD2, 0x01, COMMAND);
	LCD_gotoxy(&LCD2, 0, 0);
	LCD_sendstring(&LCD2,"Empty Slots=");
	LCD_gotoxy(&LCD2, 13, 0);
	LCD_sendchar(&LCD2,Available_Slots, DATA);
}

void LEDs_Init(void)
{
	GPIO_PinConfig_t config;

	/* RED */
	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
	config.GPIO_PinNumber = GPIO_PIN0;
	MCAL_GPIO_Init(GPIOA, &config);

	/* GREEN */
	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
	config.GPIO_PinNumber = GPIO_PIN11;
	MCAL_GPIO_Init(GPIOA, &config);
}

void PIRs_Iint(void)
{
	//PIR1 A7
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_PinNumber = GPIO_PIN7;
	PinCinfg.GPIO_Mode = GPIO_MODE_INPUT_PULLUP;
	MCAL_GPIO_Init(GPIOA, &PinCinfg);

	//PIR2 A1
	PinCinfg.GPIO_PinNumber = GPIO_PIN1;
	PinCinfg.GPIO_Mode = GPIO_MODE_INPUT_PULLUP;
	MCAL_GPIO_Init(GPIOA, &PinCinfg);

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN0, 1); //make A0 ground
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN11, 1); //make A11 ground

}

void Store_IDs_From_Admin(void)
{
	LCD_sendchar(&LCD, 0x0c, COMMAND);
	LCD_gotoxy(&LCD, 0, 0);
	LCD_sendstring(&LCD,"Enter Allowed ID");

	/*First ID*/
	LCD_gotoxy(&LCD, 4, 1);
	LCD_sendstring(&LCD,"First  ID:");
	while(HAL_KEYPAD_PressedKey() == 'N');
	pass[0]= HAL_KEYPAD_PressedKey();
	while(HAL_KEYPAD_PressedKey() != 'N');
	LCD_gotoxy(&LCD,14,1 );
	LCD_sendchar(&LCD, pass[0], DATA);
	LCD_sendchar(&LCD, 0x0c, COMMAND);

	/* Second ID */
	LCD_gotoxy(&LCD, 0, 2);
	LCD_sendstring(&LCD,"Second ID:");
	while(HAL_KEYPAD_PressedKey() == 'N');
	pass[1]=HAL_KEYPAD_PressedKey();
	while(HAL_KEYPAD_PressedKey() != 'N');
	LCD_gotoxy(&LCD, 10,2);
	LCD_sendchar(&LCD, pass[1], DATA);
	LCD_sendchar(&LCD, 0x0c, COMMAND);

	/* Third ID */
	LCD_gotoxy(&LCD, 0, 3);
	LCD_sendstring(&LCD,"Third  ID:");
	while(HAL_KEYPAD_PressedKey() == 'N');
	pass[2]=HAL_KEYPAD_PressedKey();
	while(HAL_KEYPAD_PressedKey()!='N');
	LCD_gotoxy(&LCD, 10,3 );
	LCD_sendchar(&LCD, pass[2], DATA);
	LCD_sendchar(&LCD, 0x0c, COMMAND);

	/* Saved */
	LCD_clearscreen(&LCD);
	LCD_gotoxy(&LCD, 0, 0);
	LCD_sendstring(&LCD,"IDs Are Saved");
	LCD_sendchar(&LCD, 0x0c, COMMAND);

	LCD_gotoxy(&LCD, 0, 1);
	LCD_sendchar(&LCD, pass[0], DATA);
	LCD_gotoxy(&LCD, 2, 1);
	LCD_sendchar(&LCD, pass[1], DATA);
	LCD_gotoxy(&LCD, 4, 1);
	LCD_sendchar(&LCD, pass[2], DATA);
}

