/*============================================================================================
 * Module : LCD
 *
 * File Name : lcd.h
 *
 * Author: Abdullah Maher
 *
 * Description : Header File Of LCD Driver
 *
 * Created on: May 1, 2023
 =============================================================================================*/

#ifndef INC_LCD_H_
#define INC_LCD_H_

/*===============================================================================
 *                                Includes                                       *
 ================================================================================*/
#include "stm32f103c8.h"
#include "STM32F103c8_gpio_driver.h"

/*===============================================================================
 *                       User Type Definitions Macros                            *
 ================================================================================*/

/* LCD Data bits mode configuration, its value should be 4 or 8*/
#define LCD_DATA_BITS_MODE 4 /*Write 4 or 8 Bits Mode*/

#if((LCD_DATA_BITS_MODE != 4) && (LCD_DATA_BITS_MODE != 8))

#error "Number of Data bits should be equal to 4 or 8"

#endif


/* LCD HW Ports and Pins IDS */

/* @ref Port Number ID (gpio.h)*/
/* @ref Pin Number ID (gpio.h)*/

#define LCD_RS_PORT         	        GPIOA
#define LCD_RS_PIN      	            GPIO_PIN8

#define LCD_E_PORT  	                GPIOA
#define LCD_E_PIN	                    GPIO_PIN10

#define LCD_DATA_PORT              	 	GPIOA

#if (LCD_DATA_BITS_MODE == 4)

#define LCD_DB4_PIN             	    GPIO_PIN4
#define LCD_DB5_PIN         	        GPIO_PIN5
#define LCD_DB6_PIN     	            GPIO_PIN6
#define LCD_DB7_PIN		                GPIO_PIN7

#elif (LCD_DATA_BITS_MODE == 8)

#define LCD_DB0_PIN             	    GPIO_PIN0
#define LCD_DB1_PIN         	        GPIO_PIN1
#define LCD_DB2_PIN     	            GPIO_PIN2
#define LCD_DB3_PIN		                GPIO_PIN3
#define LCD_DB4_PIN             	    GPIO_PIN4
#define LCD_DB5_PIN         	        GPIO_PIN5
#define LCD_DB6_PIN     	            GPIO_PIN6
#define LCD_DB7_PIN		                GPIO_PIN7

#endif

/* LCD Commands */
#define LCD_CMD_FUNCTION_8BIT_2LINES   					(0x38)
#define LCD_CMD_FUNCTION_4BIT_2LINES   					(0x28)
#define LCD_CMD_MOVE_DISP_RIGHT       					(0x1C)
#define LCD_CMD_MOVE_DISP_LEFT   						(0x18)
#define LCD_CMD_MOVE_CURSOR_RIGHT   					(0x14)
#define LCD_CMD_MOVE_CURSOR_LEFT 	  					(0x10)
#define LCD_CMD_DISP_OFF   								(0x08)
#define LCD_CMD_DISP_ON_CURSOR   						(0x0E)
#define LCD_CMD_DISP_ON_CURSOR_BLINK   					(0x0F)
#define LCD_CMD_DISP_ON_BLINK   						(0x0D)
#define LCD_CMD_DISP_ON   								(0x0C)
#define LCD_CMD_ENTRY_DEC   							(0x04)
#define LCD_CMD_ENTRY_DEC_SHIFT   						(0x05)
#define LCD_CMD_ENTRY_INC_   							(0x06)
#define LCD_CMD_ENTRY_INC_SHIFT   						(0x07)
#define LCD_CMD_BEGIN_AT_FIRST_ROW						(0x80)
#define LCD_CMD_BEGIN_AT_SECOND_ROW						(0xC0)
#define LCD_CMD_CLEAR_SCREEN							(0x01)
#define LCD_CMD_ENTRY_MODE								(0x06)

#define LCD_TWO_LINES_FOUR_BITS_MODE_INIT1   0x33
#define LCD_TWO_LINES_FOUR_BITS_MODE_INIT2   0x32

/*===============================================================================
 *           		    	   	   Generic Macros  		  	                     *
 ================================================================================*/



/*===============================================================================
 *                                	   APIs 		   		                     *
 ================================================================================*/

// used to initialize the LCD , the config must be done first
void LCD_init(s_LCD_Config_t  *  LCD );
//displaying character or sending command
void LCD_sendchar(s_LCD_Config_t  *  LCD ,unsigned char data ,e_LCDCharType_t e_LCDCharType);
//the whole string is displayed
void LCD_sendstring(s_LCD_Config_t  * LCD , const char *  data);
//it's not complete yet , but it's suppose to check the LCD busy flag but my code didn't work in 4bit mode
void LCDIsbusy(s_LCD_Config_t  * LCD);
// clear
void LCD_clearscreen(s_LCD_Config_t  * LCD);
// return to 0, 0
void LCD_returnhome(s_LCD_Config_t  * LCD);
// well, you got that
void LCD_gotoxy(s_LCD_Config_t  * LCD , unsigned char x , unsigned char y);
//used to build your custom character
void LCD_buildcustom(s_LCD_Config_t  * LCD ,unsigned char location ,const unsigned char * pattern );
// display it now
void LCD_dispcustom(s_LCD_Config_t  * LCD ,unsigned char location);
//shift display and/or cursor
void LCD_shift(s_LCD_Config_t  * LCD ,e_ShiftDir_t e_ShiftDir);

#endif /* INC_LCD_H_ */
