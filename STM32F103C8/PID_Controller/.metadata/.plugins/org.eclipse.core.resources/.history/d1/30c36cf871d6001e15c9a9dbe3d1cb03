/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

/*===============================================================================
 *                                Includes                                       *
 ================================================================================*/

#include "stm32f103c8.h"
#include "stm32f103c8_rcc_driver.h"
#include "stm32f103c8_exti_driver.h"
#include "stm32f103c8_gpio_driver.h"
#include "stm32f103c8_timer_driver.h"

/*===============================================================================
 *                            		  MACROS	                                 *
 ================================================================================*/



/*===============================================================================
 *                              Global Variables                                 *
 ================================================================================*/
vsint32_t PID_Res = 0;
vsint32_t Position = 0;


/*===============================================================================
 *                                	   ISR 		   		               	 	     *
 ================================================================================*/
void EncoderISR(void)
{
	sint32_t b = MCAL_GPIO_ReadPin(GPIOA, GPIO5);

	if(b > 0)
		Position--;
	else
		Position++;
}

/*===============================================================================
 *                                Application 		   		                     *
 ================================================================================*/
int main(void)
{
	MCAL_RCC_initSYSClk();

	EXTI_PinConfig_t exti_cfg;
	exti_cfg.EXTIx_Pin = EXTI4PA4;
	exti_cfg.EXTI_TriggerCase = EXTI_RISING_TRIG;
	exti_cfg.EXTI_IRQ = EXTI_IRQ_ENABLE;
	exti_cfg.p_EXTI_ISR_CallBack = EncoderISR;
	MCAL_EXTI_GPIO_Init(&exti_cfg);

	GPIO_PinConfig_t gpio_cfg;
	gpio_cfg.GPIO_PinNumber = GPIO_PIN5;
	gpio_cfg.GPIO_Mode = GPIO_MODE_INPUT_FLOATING;
	MCAL_GPIO_Init(GPIOA, &gpio_cfg);

	PID_Controller pid_cfg;
	pid_cfg.Kp = 60.0;
	pid_cfg.Ki = 0.01;
	pid_cfg.Kd = 10.0;
	pid_cfg.T = 1;
	pid_cfg.MaxLimit = 1000;
	pid_cfg.MinLimit = -1000;
	PID_Init(&pid_cfg);



    /* Loop forever */
	while(1)
	{
		PID_Res = PID_Update(&pid_cfg, 200, Position);
	}
}
