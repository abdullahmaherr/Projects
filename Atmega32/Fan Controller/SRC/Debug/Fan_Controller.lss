
Fan_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00002404  00002498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800198  00800198  000025d0  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000584  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ff6  00000000  00000000  00002eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000180b  00000000  00000000  00005eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000208a  00000000  00000000  000076b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000460  00000000  00000000  00009740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000798  00000000  00000000  00009ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  0000a338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0000aca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_1>
       8:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_2>
       c:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 07 	call	0xeea	; 0xeea <main>
      8a:	0c 94 00 12 	jmp	0x2400	; 0x2400 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 56       	subi	r30, 0x69	; 105
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MCAL_ADC_Init>:
/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/

void MCAL_ADC_Init(ADC_Config_t *p_Config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <MCAL_ADC_Init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/* Select The Vref Source, the result is right adjusted, channel 0 as initialization */
	ADMUX = ((p_Config->VoltRef) & (0xC0));
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	80 81       	ld	r24, Z
     e46:	80 7c       	andi	r24, 0xC0	; 192
     e48:	8c 93       	st	X, r24

	/* Select The Desired Prescaler, Enable ADC, Disable Auto Trigger and Interrupt */
	ADCSRA = (p_Config->Prescaler) | (1<<ADEN);
     e4a:	a6 e2       	ldi	r26, 0x26	; 38
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e9 81       	ldd	r30, Y+1	; 0x01
     e50:	fa 81       	ldd	r31, Y+2	; 0x02
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	8c 93       	st	X, r24
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <MCAL_ADC_ReadChannel>:

uint16_t MCAL_ADC_ReadChannel(uint8_t a_channelx)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	89 83       	std	Y+1, r24	; 0x01
	/* Clear First 5-Bits */
	ADMUX &= 0xE0;
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 7e       	andi	r24, 0xE0	; 224
     e7a:	8c 93       	st	X, r24
	/* Select The Desired Channel (must to be Single-Ended) */
	ADMUX |= (a_channelx & 0x07);
     e7c:	a7 e2       	ldi	r26, 0x27	; 39
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e2       	ldi	r30, 0x27	; 39
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	98 2f       	mov	r25, r24
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	89 2b       	or	r24, r25
     e8e:	8c 93       	st	X, r24

	/*Start Conversion*/
	ADCSRA |= (1<<ADSC);
     e90:	a6 e2       	ldi	r26, 0x26	; 38
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e6 e2       	ldi	r30, 0x26	; 38
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 64       	ori	r24, 0x40	; 64
     e9c:	8c 93       	st	X, r24

	/* Waiting Until The Conversion Is Ended */
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	80 71       	andi	r24, 0x10	; 16
     eaa:	90 70       	andi	r25, 0x00	; 0
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	b9 f3       	breq	.-18     	; 0xe9e <MCAL_ADC_ReadChannel+0x3c>
	/*Clear The Flag*/
	SET_BIT(ADCSRA,ADCSRA);
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	e6 e2       	ldi	r30, 0x26	; 38
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <MCAL_ADC_ReadChannel+0x70>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <MCAL_ADC_ReadChannel+0x6c>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24

	/* Return Data Register Value */
	return ADC;
     eda:	e4 e2       	ldi	r30, 0x24	; 36
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <main>:
/*===============================================================================
 *                                Application                                    *
 ================================================================================*/

int main(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2f 97       	sbiw	r28, 0x0f	; 15
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
	uint8_t Temperature;

	/* Initialization of Component */
	HAL_LCD_Init();
     efe:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <HAL_LCD_Init>
	HAL_DCMotor_GPIO_Init(GPIOB_ID, GPIO_PIN0);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	0e 94 9e 08 	call	0x113c	; 0x113c <HAL_DCMotor_GPIO_Init>
	HAL_LM35_ADC_Init();
     f0a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <HAL_LM35_ADC_Init>

	HAL_LCD_DisplayStringRowCol(0,1, "FAN CONTROLLER");
     f0e:	20 e6       	ldi	r18, 0x60	; 96
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	a9 01       	movw	r20, r18
     f18:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa e7       	ldi	r26, 0x7A	; 122
     f22:	b4 e4       	ldi	r27, 0x44	; 68
     f24:	8b 87       	std	Y+11, r24	; 0x0b
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	ad 87       	std	Y+13, r26	; 0x0d
     f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	53 e4       	ldi	r21, 0x43	; 67
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8f 83       	std	Y+7, r24	; 0x07
     f46:	98 87       	std	Y+8, r25	; 0x08
     f48:	a9 87       	std	Y+9, r26	; 0x09
     f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <main+0x84>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <main+0x102>
	else if (__tmp > 65535)
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
     fae:	0f c0       	rjmp	.+30     	; 0xfce <main+0xe4>
     fb0:	89 e1       	ldi	r24, 0x19	; 25
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0xd2>
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <main+0xc6>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <main+0x10e>
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HAL_LCD_ClearScreen();
    1000:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <HAL_LCD_ClearScreen>

	HAL_LCD_DisplayStringRowCol(0,0, "Fan Is ");
    1004:	2f e6       	ldi	r18, 0x6F	; 111
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
	HAL_LCD_DisplayStringRowCol(1,0, "Temp. Is ");
    1012:	27 e7       	ldi	r18, 0x77	; 119
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>

	while(1)
	{
		Temperature = HAL_LM35_GetTemp();
    1020:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <HAL_LM35_GetTemp>
    1024:	8f 87       	std	Y+15, r24	; 0x0f
		HAL_LCD_MoveCursor(1,10);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	6a e0       	ldi	r22, 0x0A	; 10
    102a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <HAL_LCD_MoveCursor>
		if(Temperature >= 100)
    102e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1030:	84 36       	cpi	r24, 0x64	; 100
    1032:	50 f0       	brcs	.+20     	; 0x1048 <main+0x15e>
		{
			HAL_LCD_IntgerToString(Temperature);
    1034:	8f 85       	ldd	r24, Y+15	; 0x0f
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HAL_LCD_IntgerToString>
    1046:	0c c0       	rjmp	.+24     	; 0x1060 <main+0x176>
		}else
		{
			HAL_LCD_IntgerToString(Temperature);
    1048:	8f 85       	ldd	r24, Y+15	; 0x0f
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <HAL_LCD_IntgerToString>
			HAL_LCD_DisplayCharacter(' ');
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <HAL_LCD_DisplayCharacter>
		}

		if(Temperature < 30)
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	8e 31       	cpi	r24, 0x1E	; 30
    1064:	88 f4       	brcc	.+34     	; 0x1088 <main+0x19e>
		{
			HAL_LCD_DisplayStringRowCol(0, 9, "STOP  ");
    1066:	21 e8       	ldi	r18, 0x81	; 129
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	69 e0       	ldi	r22, 0x09	; 9
    106e:	a9 01       	movw	r20, r18
    1070:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
			HAL_DCMotor_Rotate(GPIOB_ID, GPIO_PIN0, DCMOTOR_ROT_STOP);
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	0e 94 b7 08 	call	0x116e	; 0x116e <HAL_DCMotor_Rotate>
			HAL_DCMotor_Speed(PWM0, 0);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <HAL_DCMotor_Speed>
    1086:	cc cf       	rjmp	.-104    	; 0x1020 <main+0x136>

		}else if((Temperature >= 30) && (Temperature < 60))
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	8e 31       	cpi	r24, 0x1E	; 30
    108c:	a0 f0       	brcs	.+40     	; 0x10b6 <main+0x1cc>
    108e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1090:	8c 33       	cpi	r24, 0x3C	; 60
    1092:	88 f4       	brcc	.+34     	; 0x10b6 <main+0x1cc>
		{
			HAL_LCD_DisplayStringRowCol(0, 9, "RUN_CW");
    1094:	28 e8       	ldi	r18, 0x88	; 136
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	69 e0       	ldi	r22, 0x09	; 9
    109c:	a9 01       	movw	r20, r18
    109e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
			HAL_DCMotor_Rotate(GPIOB_ID, GPIO_PIN0, DCMOTOR_ROT_CW);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	0e 94 b7 08 	call	0x116e	; 0x116e <HAL_DCMotor_Rotate>
			HAL_DCMotor_Speed(PWM0, 25);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	69 e1       	ldi	r22, 0x19	; 25
    10b0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <HAL_DCMotor_Speed>
    10b4:	b5 cf       	rjmp	.-150    	; 0x1020 <main+0x136>

		}else if((Temperature >= 60) && (Temperature < 90))
    10b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b8:	8c 33       	cpi	r24, 0x3C	; 60
    10ba:	a0 f0       	brcs	.+40     	; 0x10e4 <main+0x1fa>
    10bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10be:	8a 35       	cpi	r24, 0x5A	; 90
    10c0:	88 f4       	brcc	.+34     	; 0x10e4 <main+0x1fa>
		{
			HAL_LCD_DisplayStringRowCol(0, 9, "RUN_CW");
    10c2:	28 e8       	ldi	r18, 0x88	; 136
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	69 e0       	ldi	r22, 0x09	; 9
    10ca:	a9 01       	movw	r20, r18
    10cc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
			HAL_DCMotor_Rotate(GPIOB_ID, GPIO_PIN0, DCMOTOR_ROT_CW);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	0e 94 b7 08 	call	0x116e	; 0x116e <HAL_DCMotor_Rotate>
			HAL_DCMotor_Speed(PWM0, 50);
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	62 e3       	ldi	r22, 0x32	; 50
    10de:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <HAL_DCMotor_Speed>
    10e2:	9e cf       	rjmp	.-196    	; 0x1020 <main+0x136>

		}else if((Temperature >= 90) && (Temperature < 120))
    10e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e6:	8a 35       	cpi	r24, 0x5A	; 90
    10e8:	a0 f0       	brcs	.+40     	; 0x1112 <main+0x228>
    10ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ec:	88 37       	cpi	r24, 0x78	; 120
    10ee:	88 f4       	brcc	.+34     	; 0x1112 <main+0x228>
		{
			HAL_LCD_DisplayStringRowCol(0, 9, "RUN_CW");
    10f0:	28 e8       	ldi	r18, 0x88	; 136
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	69 e0       	ldi	r22, 0x09	; 9
    10f8:	a9 01       	movw	r20, r18
    10fa:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
			HAL_DCMotor_Rotate(GPIOB_ID, GPIO_PIN0, DCMOTOR_ROT_CW);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	0e 94 b7 08 	call	0x116e	; 0x116e <HAL_DCMotor_Rotate>
			HAL_DCMotor_Speed(PWM0, 75);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	6b e4       	ldi	r22, 0x4B	; 75
    110c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <HAL_DCMotor_Speed>
    1110:	87 cf       	rjmp	.-242    	; 0x1020 <main+0x136>

		}else if((Temperature >= 120))
    1112:	8f 85       	ldd	r24, Y+15	; 0x0f
    1114:	88 37       	cpi	r24, 0x78	; 120
    1116:	08 f4       	brcc	.+2      	; 0x111a <main+0x230>
    1118:	83 cf       	rjmp	.-250    	; 0x1020 <main+0x136>
		{
			HAL_LCD_DisplayStringRowCol(0, 9, "RUN_CW");
    111a:	28 e8       	ldi	r18, 0x88	; 136
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	69 e0       	ldi	r22, 0x09	; 9
    1122:	a9 01       	movw	r20, r18
    1124:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <HAL_LCD_DisplayStringRowCol>
			HAL_DCMotor_Rotate(GPIOB_ID, GPIO_PIN0, DCMOTOR_ROT_CW);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 b7 08 	call	0x116e	; 0x116e <HAL_DCMotor_Rotate>
			HAL_DCMotor_Speed(PWM0, 100);
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	64 e6       	ldi	r22, 0x64	; 100
    1136:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <HAL_DCMotor_Speed>
    113a:	72 cf       	rjmp	.-284    	; 0x1020 <main+0x136>

0000113c <HAL_DCMotor_GPIO_Init>:
/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/

void HAL_DCMotor_GPIO_Init(uint8_t a_Port,uint8_t a_Pin)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <HAL_DCMotor_GPIO_Init+0x6>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
	/* Configure The Pins of DC Motor as Output in PORTx */
	MCAL_GPIO_PinInit(a_Port, a_Pin, GPIO_PIN_OUTPUT);
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	6a 81       	ldd	r22, Y+2	; 0x02
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	0e 94 27 09 	call	0x124e	; 0x124e <MCAL_GPIO_PinInit>
	MCAL_GPIO_PinInit(a_Port, (a_Pin+1), GPIO_PIN_OUTPUT);
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	98 2f       	mov	r25, r24
    1158:	9f 5f       	subi	r25, 0xFF	; 255
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	69 2f       	mov	r22, r25
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 27 09 	call	0x124e	; 0x124e <MCAL_GPIO_PinInit>
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <HAL_DCMotor_Rotate>:


void HAL_DCMotor_Rotate(uint8_t a_Port, uint8_t a_Pin, uint8_t a_Direction)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <HAL_DCMotor_Rotate+0x6>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
    117e:	4b 83       	std	Y+3, r20	; 0x03
	/* Assign The Motor State */
	if(a_Direction == DCMOTOR_ROT_CW)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	71 f4       	brne	.+28     	; 0x11a2 <HAL_DCMotor_Rotate+0x34>
	{
		MCAL_GPIO_WritePin(a_Port, a_Pin, LOGIC_HIGH);
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	6a 81       	ldd	r22, Y+2	; 0x02
    118a:	41 e0       	ldi	r20, 0x01	; 1
    118c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(a_Port, (a_Pin+1), LOGIC_LOW);
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	98 2f       	mov	r25, r24
    1194:	9f 5f       	subi	r25, 0xFF	; 255
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	69 2f       	mov	r22, r25
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
    11a0:	21 c0       	rjmp	.+66     	; 0x11e4 <HAL_DCMotor_Rotate+0x76>
	}
	else if(a_Direction == DCMOTOR_ROT_CCW)
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	71 f4       	brne	.+28     	; 0x11c4 <HAL_DCMotor_Rotate+0x56>
	{
		MCAL_GPIO_WritePin(a_Port, a_Pin, LOGIC_LOW);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	6a 81       	ldd	r22, Y+2	; 0x02
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(a_Port, (a_Pin+1), LOGIC_HIGH);
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	98 2f       	mov	r25, r24
    11b6:	9f 5f       	subi	r25, 0xFF	; 255
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	69 2f       	mov	r22, r25
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
    11c2:	10 c0       	rjmp	.+32     	; 0x11e4 <HAL_DCMotor_Rotate+0x76>
	}
	else if(a_Direction == DCMOTOR_ROT_STOP)
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 23       	and	r24, r24
    11c8:	69 f4       	brne	.+26     	; 0x11e4 <HAL_DCMotor_Rotate+0x76>
	{
		MCAL_GPIO_WritePin(a_Port, a_Pin, LOGIC_LOW);
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	6a 81       	ldd	r22, Y+2	; 0x02
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(a_Port, (a_Pin+1), LOGIC_LOW);
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	98 2f       	mov	r25, r24
    11d8:	9f 5f       	subi	r25, 0xFF	; 255
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	69 2f       	mov	r22, r25
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	}
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <HAL_DCMotor_Speed>:


void HAL_DCMotor_Speed(uint8_t a_pwmx,uint8_t a_speed)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <HAL_DCMotor_Speed+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <HAL_DCMotor_Speed+0x8>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02

	switch(a_pwmx)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3c 83       	std	Y+4, r19	; 0x04
    1208:	2b 83       	std	Y+3, r18	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	b1 f0       	breq	.+44     	; 0x1240 <HAL_DCMotor_Speed+0x50>
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	3c 81       	ldd	r19, Y+4	; 0x04
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	59 f0       	breq	.+22     	; 0x1234 <HAL_DCMotor_Speed+0x44>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	69 f4       	brne	.+26     	; 0x1240 <HAL_DCMotor_Speed+0x50>
	{
	case 0:
		MCAL_TIMER0_PWMInit(PWM_CLK_PRE_8);
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <MCAL_TIMER0_PWMInit>
		MCAL_TIMER0_PWMSetDuty(a_speed);
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	0e 94 8b 10 	call	0x2116	; 0x2116 <MCAL_TIMER0_PWMSetDuty>
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <HAL_DCMotor_Speed+0x50>
		break;
	case 1:
		break;
	case 2:
		MCAL_TIMER2_PWMInit(PWM_CLK_PRE_8);
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	0e 94 72 10 	call	0x20e4	; 0x20e4 <MCAL_TIMER2_PWMInit>
		MCAL_TIMER2_PWMSetDuty(a_speed);
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	0e 94 2f 11 	call	0x225e	; 0x225e <MCAL_TIMER2_PWMSetDuty>
		break;
	default:
		break;
	}

}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <MCAL_GPIO_PinInit>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void MCAL_GPIO_PinInit(uint8_t PORTx, uint8_t PINx, uint8_t Direction)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <MCAL_GPIO_PinInit+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <MCAL_GPIO_PinInit+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	6a 83       	std	Y+2, r22	; 0x02
    1260:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT.
	 */
	if((PINx >= NUM_OF_PINS) || (PORTx >= NUM_OF_PORTS))
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	08 f0       	brcs	.+2      	; 0x126a <MCAL_GPIO_PinInit+0x1c>
    1268:	d5 c0       	rjmp	.+426    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	08 f0       	brcs	.+2      	; 0x1272 <MCAL_GPIO_PinInit+0x24>
    1270:	d1 c0       	rjmp	.+418    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as Given */
		switch(PORTx)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3d 83       	std	Y+5, r19	; 0x05
    127a:	2c 83       	std	Y+4, r18	; 0x04
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <MCAL_GPIO_PinInit+0x3a>
    1286:	43 c0       	rjmp	.+134    	; 0x130e <MCAL_GPIO_PinInit+0xc0>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	2c f4       	brge	.+10     	; 0x129c <MCAL_GPIO_PinInit+0x4e>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	71 f0       	breq	.+28     	; 0x12b6 <MCAL_GPIO_PinInit+0x68>
    129a:	bc c0       	rjmp	.+376    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <MCAL_GPIO_PinInit+0x5a>
    12a6:	5f c0       	rjmp	.+190    	; 0x1366 <MCAL_GPIO_PinInit+0x118>
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <MCAL_GPIO_PinInit+0x66>
    12b2:	85 c0       	rjmp	.+266    	; 0x13be <MCAL_GPIO_PinInit+0x170>
    12b4:	af c0       	rjmp	.+350    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
		{
		case GPIOA_ID:
			if(Direction == GPIO_PIN_OUTPUT)
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	a1 f4       	brne	.+40     	; 0x12e4 <MCAL_GPIO_PinInit+0x96>
			{
				SET_BIT(DDRA,PINx);
    12bc:	aa e3       	ldi	r26, 0x3A	; 58
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <MCAL_GPIO_PinInit+0x8c>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <MCAL_GPIO_PinInit+0x88>
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	98 c0       	rjmp	.+304    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,PINx);
    12e4:	aa e3       	ldi	r26, 0x3A	; 58
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ea e3       	ldi	r30, 0x3A	; 58
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MCAL_GPIO_PinInit+0xb4>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <MCAL_GPIO_PinInit+0xb0>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	83 c0       	rjmp	.+262    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			break;
		case GPIOB_ID:
			if(Direction == GPIO_PIN_OUTPUT)
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	a1 f4       	brne	.+40     	; 0x133c <MCAL_GPIO_PinInit+0xee>
			{
				SET_BIT(DDRB,PINx);
    1314:	a7 e3       	ldi	r26, 0x37	; 55
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e7 e3       	ldi	r30, 0x37	; 55
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <MCAL_GPIO_PinInit+0xe4>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <MCAL_GPIO_PinInit+0xe0>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	6c c0       	rjmp	.+216    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,PINx);
    133c:	a7 e3       	ldi	r26, 0x37	; 55
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e7 e3       	ldi	r30, 0x37	; 55
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <MCAL_GPIO_PinInit+0x10c>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <MCAL_GPIO_PinInit+0x108>
    135e:	80 95       	com	r24
    1360:	84 23       	and	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	57 c0       	rjmp	.+174    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			break;
		case GPIOC_ID:
			if(Direction == GPIO_PIN_OUTPUT)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	a1 f4       	brne	.+40     	; 0x1394 <MCAL_GPIO_PinInit+0x146>
			{
				SET_BIT(DDRC,PINx);
    136c:	a4 e3       	ldi	r26, 0x34	; 52
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <MCAL_GPIO_PinInit+0x13c>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <MCAL_GPIO_PinInit+0x138>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	40 c0       	rjmp	.+128    	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,PINx);
    1394:	a4 e3       	ldi	r26, 0x34	; 52
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e4 e3       	ldi	r30, 0x34	; 52
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <MCAL_GPIO_PinInit+0x164>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <MCAL_GPIO_PinInit+0x160>
    13b6:	80 95       	com	r24
    13b8:	84 23       	and	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	2b c0       	rjmp	.+86     	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			break;
		case GPIOD_ID:
			if(Direction == GPIO_PIN_OUTPUT)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <MCAL_GPIO_PinInit+0x19e>
			{
				SET_BIT(DDRD,PINx);
    13c4:	a1 e3       	ldi	r26, 0x31	; 49
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e1 e3       	ldi	r30, 0x31	; 49
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <MCAL_GPIO_PinInit+0x194>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <MCAL_GPIO_PinInit+0x190>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <MCAL_GPIO_PinInit+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,PINx);
    13ec:	a1 e3       	ldi	r26, 0x31	; 49
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e1 e3       	ldi	r30, 0x31	; 49
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <MCAL_GPIO_PinInit+0x1bc>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <MCAL_GPIO_PinInit+0x1b8>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <MCAL_GPIO_PortInit>:

void MCAL_GPIO_PortInit(uint8_t PORTx, uint8_t Direction)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <MCAL_GPIO_PortInit+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <MCAL_GPIO_PortInit+0x8>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT.
	 */
	if(PORTx >= NUM_OF_PORTS)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	90 f5       	brcc	.+100    	; 0x149e <MCAL_GPIO_PortInit+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as Given */
		switch(PORTx)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	d1 f0       	breq	.+52     	; 0x1482 <MCAL_GPIO_PortInit+0x5e>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <MCAL_GPIO_PortInit+0x3e>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <MCAL_GPIO_PortInit+0x54>
    1460:	1e c0       	rjmp	.+60     	; 0x149e <MCAL_GPIO_PortInit+0x7a>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <MCAL_GPIO_PortInit+0x68>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <MCAL_GPIO_PortInit+0x72>
    1476:	13 c0       	rjmp	.+38     	; 0x149e <MCAL_GPIO_PortInit+0x7a>
		{
		case GPIOA_ID:
			DDRA = Direction;
    1478:	ea e3       	ldi	r30, 0x3A	; 58
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	0e c0       	rjmp	.+28     	; 0x149e <MCAL_GPIO_PortInit+0x7a>
			break;
		case GPIOB_ID:
			DDRB = Direction;
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	09 c0       	rjmp	.+18     	; 0x149e <MCAL_GPIO_PortInit+0x7a>
			break;
		case GPIOC_ID:
			DDRC = Direction;
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	04 c0       	rjmp	.+8      	; 0x149e <MCAL_GPIO_PortInit+0x7a>
			break;
		case GPIOD_ID:
			DDRD = Direction;
    1496:	e1 e3       	ldi	r30, 0x31	; 49
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
			break;
		}
	}
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <MCAL_GPIO_ReadPin>:

uint8_t MCAL_GPIO_ReadPin(uint8_t PORTx, uint8_t a_PinNumber)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <MCAL_GPIO_ReadPin+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <MCAL_GPIO_ReadPin+0x8>
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t pin_value = 0;
    14be:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT.
	 */
	if(( a_PinNumber >= NUM_OF_PINS) || (PORTx >= NUM_OF_PORTS))
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <MCAL_GPIO_ReadPin+0x1c>
    14c6:	84 c0       	rjmp	.+264    	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <MCAL_GPIO_ReadPin+0x24>
    14ce:	80 c0       	rjmp	.+256    	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as Given */
		switch(PORTx)
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3d 83       	std	Y+5, r19	; 0x05
    14d8:	2c 83       	std	Y+4, r18	; 0x04
    14da:	4c 81       	ldd	r20, Y+4	; 0x04
    14dc:	5d 81       	ldd	r21, Y+5	; 0x05
    14de:	41 30       	cpi	r20, 0x01	; 1
    14e0:	51 05       	cpc	r21, r1
    14e2:	79 f1       	breq	.+94     	; 0x1542 <MCAL_GPIO_ReadPin+0x96>
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	91 05       	cpc	r25, r1
    14ec:	34 f4       	brge	.+12     	; 0x14fa <MCAL_GPIO_ReadPin+0x4e>
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	21 15       	cp	r18, r1
    14f4:	31 05       	cpc	r19, r1
    14f6:	69 f0       	breq	.+26     	; 0x1512 <MCAL_GPIO_ReadPin+0x66>
    14f8:	6b c0       	rjmp	.+214    	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
    14fa:	4c 81       	ldd	r20, Y+4	; 0x04
    14fc:	5d 81       	ldd	r21, Y+5	; 0x05
    14fe:	42 30       	cpi	r20, 0x02	; 2
    1500:	51 05       	cpc	r21, r1
    1502:	b9 f1       	breq	.+110    	; 0x1572 <MCAL_GPIO_ReadPin+0xc6>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <MCAL_GPIO_ReadPin+0x64>
    150e:	49 c0       	rjmp	.+146    	; 0x15a2 <MCAL_GPIO_ReadPin+0xf6>
    1510:	5f c0       	rjmp	.+190    	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
		{
		case GPIOA_ID:
			if(BIT_IS_SET(PINA,a_PinNumber))
    1512:	e9 e3       	ldi	r30, 0x39	; 57
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <MCAL_GPIO_ReadPin+0x7e>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <MCAL_GPIO_ReadPin+0x7a>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	90 70       	andi	r25, 0x00	; 0
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <MCAL_GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	49 c0       	rjmp	.+146    	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    153e:	19 82       	std	Y+1, r1	; 0x01
    1540:	47 c0       	rjmp	.+142    	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			break;
		case GPIOB_ID:
			if(BIT_IS_SET(PINB,a_PinNumber))
    1542:	e6 e3       	ldi	r30, 0x36	; 54
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <MCAL_GPIO_ReadPin+0xae>
    1556:	55 95       	asr	r21
    1558:	47 95       	ror	r20
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <MCAL_GPIO_ReadPin+0xaa>
    155e:	ca 01       	movw	r24, r20
    1560:	81 70       	andi	r24, 0x01	; 1
    1562:	90 70       	andi	r25, 0x00	; 0
    1564:	88 23       	and	r24, r24
    1566:	19 f0       	breq	.+6      	; 0x156e <MCAL_GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	31 c0       	rjmp	.+98     	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    156e:	19 82       	std	Y+1, r1	; 0x01
    1570:	2f c0       	rjmp	.+94     	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			break;
		case GPIOC_ID:
			if(BIT_IS_SET(PINC,a_PinNumber))
    1572:	e3 e3       	ldi	r30, 0x33	; 51
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <MCAL_GPIO_ReadPin+0xde>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <MCAL_GPIO_ReadPin+0xda>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	88 23       	and	r24, r24
    1596:	19 f0       	breq	.+6      	; 0x159e <MCAL_GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	19 c0       	rjmp	.+50     	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    159e:	19 82       	std	Y+1, r1	; 0x01
    15a0:	17 c0       	rjmp	.+46     	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			break;
		case GPIOD_ID:
			if(BIT_IS_SET(PIND,a_PinNumber))
    15a2:	e0 e3       	ldi	r30, 0x30	; 48
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a9 01       	movw	r20, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <MCAL_GPIO_ReadPin+0x10e>
    15b6:	55 95       	asr	r21
    15b8:	47 95       	ror	r20
    15ba:	8a 95       	dec	r24
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <MCAL_GPIO_ReadPin+0x10a>
    15be:	ca 01       	movw	r24, r20
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	88 23       	and	r24, r24
    15c6:	19 f0       	breq	.+6      	; 0x15ce <MCAL_GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <MCAL_GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <MCAL_GPIO_WritePin>:

void MCAL_GPIO_WritePin(uint8_t PORTx, uint8_t a_PinNumber, uint8_t a_Value)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <MCAL_GPIO_WritePin+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <MCAL_GPIO_WritePin+0x8>
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
    15f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT.
	 */
	if((a_PinNumber >= NUM_OF_PINS) || (PORTx >= NUM_OF_PORTS))
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	88 30       	cpi	r24, 0x08	; 8
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <MCAL_GPIO_WritePin+0x1c>
    15fc:	d5 c0       	rjmp	.+426    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	08 f0       	brcs	.+2      	; 0x1606 <MCAL_GPIO_WritePin+0x24>
    1604:	d1 c0       	rjmp	.+418    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as Given */
		switch(PORTx)
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3d 83       	std	Y+5, r19	; 0x05
    160e:	2c 83       	std	Y+4, r18	; 0x04
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <MCAL_GPIO_WritePin+0x3a>
    161a:	43 c0       	rjmp	.+134    	; 0x16a2 <MCAL_GPIO_WritePin+0xc0>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <MCAL_GPIO_WritePin+0x4e>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	71 f0       	breq	.+28     	; 0x164a <MCAL_GPIO_WritePin+0x68>
    162e:	bc c0       	rjmp	.+376    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
    1630:	2c 81       	ldd	r18, Y+4	; 0x04
    1632:	3d 81       	ldd	r19, Y+5	; 0x05
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <MCAL_GPIO_WritePin+0x5a>
    163a:	5f c0       	rjmp	.+190    	; 0x16fa <MCAL_GPIO_WritePin+0x118>
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <MCAL_GPIO_WritePin+0x66>
    1646:	85 c0       	rjmp	.+266    	; 0x1752 <MCAL_GPIO_WritePin+0x170>
    1648:	af c0       	rjmp	.+350    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
		{
		case GPIOA_ID:
			if(a_Value == LOGIC_HIGH)
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	a1 f4       	brne	.+40     	; 0x1678 <MCAL_GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA,a_PinNumber);
    1650:	ab e3       	ldi	r26, 0x3B	; 59
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	eb e3       	ldi	r30, 0x3B	; 59
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <MCAL_GPIO_WritePin+0x8c>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <MCAL_GPIO_WritePin+0x88>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	98 c0       	rjmp	.+304    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,a_PinNumber);
    1678:	ab e3       	ldi	r26, 0x3B	; 59
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	eb e3       	ldi	r30, 0x3B	; 59
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MCAL_GPIO_WritePin+0xb4>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MCAL_GPIO_WritePin+0xb0>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	83 c0       	rjmp	.+262    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			break;
		case GPIOB_ID:
			if(a_Value == LOGIC_HIGH)
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	a1 f4       	brne	.+40     	; 0x16d0 <MCAL_GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB,a_PinNumber);
    16a8:	a8 e3       	ldi	r26, 0x38	; 56
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e8 e3       	ldi	r30, 0x38	; 56
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <MCAL_GPIO_WritePin+0xe4>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <MCAL_GPIO_WritePin+0xe0>
    16ca:	84 2b       	or	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	6c c0       	rjmp	.+216    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,a_PinNumber);
    16d0:	a8 e3       	ldi	r26, 0x38	; 56
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e8 e3       	ldi	r30, 0x38	; 56
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <MCAL_GPIO_WritePin+0x10c>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <MCAL_GPIO_WritePin+0x108>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	57 c0       	rjmp	.+174    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			break;
		case GPIOC_ID:
			if(a_Value == LOGIC_HIGH)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <MCAL_GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC,a_PinNumber);
    1700:	a5 e3       	ldi	r26, 0x35	; 53
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <MCAL_GPIO_WritePin+0x13c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <MCAL_GPIO_WritePin+0x138>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	40 c0       	rjmp	.+128    	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,a_PinNumber);
    1728:	a5 e3       	ldi	r26, 0x35	; 53
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e5 e3       	ldi	r30, 0x35	; 53
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <MCAL_GPIO_WritePin+0x164>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <MCAL_GPIO_WritePin+0x160>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	2b c0       	rjmp	.+86     	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			break;
		case GPIOD_ID:
			if(a_Value == LOGIC_HIGH)
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	a1 f4       	brne	.+40     	; 0x1780 <MCAL_GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD,a_PinNumber);
    1758:	a2 e3       	ldi	r26, 0x32	; 50
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e2 e3       	ldi	r30, 0x32	; 50
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <MCAL_GPIO_WritePin+0x194>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <MCAL_GPIO_WritePin+0x190>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <MCAL_GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,a_PinNumber);
    1780:	a2 e3       	ldi	r26, 0x32	; 50
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e2 e3       	ldi	r30, 0x32	; 50
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <MCAL_GPIO_WritePin+0x1bc>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <MCAL_GPIO_WritePin+0x1b8>
    17a2:	80 95       	com	r24
    17a4:	84 23       	and	r24, r20
    17a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <MCAL_GPIO_ReadPort>:

uint8_t MCAL_GPIO_ReadPort(uint8_t PORTx)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <MCAL_GPIO_ReadPort+0x6>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <MCAL_GPIO_ReadPort+0x8>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t port_value = 0;
    17c6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS.
	 */
	if(PORTx >= NUM_OF_PORTS)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	90 f5       	brcc	.+100    	; 0x1832 <MCAL_GPIO_ReadPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as Given */
		switch(PORTx)
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3c 83       	std	Y+4, r19	; 0x04
    17d6:	2b 83       	std	Y+3, r18	; 0x03
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	d1 f0       	breq	.+52     	; 0x1816 <MCAL_GPIO_ReadPort+0x5e>
    17e2:	2b 81       	ldd	r18, Y+3	; 0x03
    17e4:	3c 81       	ldd	r19, Y+4	; 0x04
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <MCAL_GPIO_ReadPort+0x3e>
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	61 f0       	breq	.+24     	; 0x180c <MCAL_GPIO_ReadPort+0x54>
    17f4:	1e c0       	rjmp	.+60     	; 0x1832 <MCAL_GPIO_ReadPort+0x7a>
    17f6:	2b 81       	ldd	r18, Y+3	; 0x03
    17f8:	3c 81       	ldd	r19, Y+4	; 0x04
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	81 f0       	breq	.+32     	; 0x1820 <MCAL_GPIO_ReadPort+0x68>
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	91 05       	cpc	r25, r1
    1808:	81 f0       	breq	.+32     	; 0x182a <MCAL_GPIO_ReadPort+0x72>
    180a:	13 c0       	rjmp	.+38     	; 0x1832 <MCAL_GPIO_ReadPort+0x7a>
		{
		case GPIOA_ID:
			port_value = PINA;
    180c:	e9 e3       	ldi	r30, 0x39	; 57
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <MCAL_GPIO_ReadPort+0x7a>
			break;
		case GPIOB_ID:
			port_value = PINB;
    1816:	e6 e3       	ldi	r30, 0x36	; 54
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <MCAL_GPIO_ReadPort+0x7a>
			break;
		case GPIOC_ID:
			port_value = PINC;
    1820:	e3 e3       	ldi	r30, 0x33	; 51
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <MCAL_GPIO_ReadPort+0x7a>
			break;
		case GPIOD_ID:
			port_value = PIND;
    182a:	e0 e3       	ldi	r30, 0x30	; 48
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return port_value;
    1832:	89 81       	ldd	r24, Y+1	; 0x01
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <MCAL_GPIO_WritePort>:

void MCAL_GPIO_WritePort(uint8_t PORTx, uint8_t a_Value)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	00 d0       	rcall	.+0      	; 0x1848 <MCAL_GPIO_WritePort+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <MCAL_GPIO_WritePort+0x8>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS.
	 */
	if(PORTx >= NUM_OF_PORTS)
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	84 30       	cpi	r24, 0x04	; 4
    1856:	90 f5       	brcc	.+100    	; 0x18bc <MCAL_GPIO_WritePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as given */
		switch(PORTx)
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3c 83       	std	Y+4, r19	; 0x04
    1860:	2b 83       	std	Y+3, r18	; 0x03
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	d1 f0       	breq	.+52     	; 0x18a0 <MCAL_GPIO_WritePort+0x5e>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	2c f4       	brge	.+10     	; 0x1880 <MCAL_GPIO_WritePort+0x3e>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	61 f0       	breq	.+24     	; 0x1896 <MCAL_GPIO_WritePort+0x54>
    187e:	1e c0       	rjmp	.+60     	; 0x18bc <MCAL_GPIO_WritePort+0x7a>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	81 f0       	breq	.+32     	; 0x18aa <MCAL_GPIO_WritePort+0x68>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	81 f0       	breq	.+32     	; 0x18b4 <MCAL_GPIO_WritePort+0x72>
    1894:	13 c0       	rjmp	.+38     	; 0x18bc <MCAL_GPIO_WritePort+0x7a>
		{
		case GPIOA_ID:
			PORTA = a_Value;
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 83       	st	Z, r24
    189e:	0e c0       	rjmp	.+28     	; 0x18bc <MCAL_GPIO_WritePort+0x7a>
			break;
		case GPIOB_ID:
			PORTB = a_Value;
    18a0:	e8 e3       	ldi	r30, 0x38	; 56
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	80 83       	st	Z, r24
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <MCAL_GPIO_WritePort+0x7a>
			break;
		case GPIOC_ID:
			PORTC = a_Value;
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	80 83       	st	Z, r24
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <MCAL_GPIO_WritePort+0x7a>
			break;
		case GPIOD_ID:
			PORTD = a_Value;
    18b4:	e2 e3       	ldi	r30, 0x32	; 50
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	80 83       	st	Z, r24
			break;
		}
	}
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <MCAL_GPIO_INT0Init>:

void MCAL_GPIO_INT0Init(uint8_t a_triggerCase, uint8_t a_IntMask,void (*p_ISR0)(void))
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <MCAL_GPIO_INT0Init+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <MCAL_GPIO_INT0Init+0x8>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <MCAL_GPIO_INT0Init+0xa>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	6a 83       	std	Y+2, r22	; 0x02
    18dc:	5c 83       	std	Y+4, r21	; 0x04
    18de:	4b 83       	std	Y+3, r20	; 0x03
	/*Configure PORTD PIN2 as Input for INT1*/
	DDRD &= (~(1<<PD2));
    18e0:	a1 e3       	ldi	r26, 0x31	; 49
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e1 e3       	ldi	r30, 0x31	; 49
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8b 7f       	andi	r24, 0xFB	; 251
    18ec:	8c 93       	st	X, r24

	/*Configure Trigger Case if Raising or Failing or Both*/
	MCUCR |= (a_triggerCase & 0x03);
    18ee:	a5 e5       	ldi	r26, 0x55	; 85
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e5 e5       	ldi	r30, 0x55	; 85
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	98 2f       	mov	r25, r24
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	83 70       	andi	r24, 0x03	; 3
    18fe:	89 2b       	or	r24, r25
    1900:	8c 93       	st	X, r24

	/*Assign The CallBack Function With The User's ISR*/
	gp_CallBack[0] = p_ISR0;
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	90 93 99 01 	sts	0x0199, r25
    190a:	80 93 98 01 	sts	0x0198, r24

	/*Enable/Disable MASK INT1*/
	switch(a_IntMask)
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3e 83       	std	Y+6, r19	; 0x06
    1916:	2d 83       	std	Y+5, r18	; 0x05
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	31 f0       	breq	.+12     	; 0x192c <MCAL_GPIO_INT0Init+0x62>
    1920:	2d 81       	ldd	r18, Y+5	; 0x05
    1922:	3e 81       	ldd	r19, Y+6	; 0x06
    1924:	21 30       	cpi	r18, 0x01	; 1
    1926:	31 05       	cpc	r19, r1
    1928:	49 f0       	breq	.+18     	; 0x193c <MCAL_GPIO_INT0Init+0x72>
    192a:	0f c0       	rjmp	.+30     	; 0x194a <MCAL_GPIO_INT0Init+0x80>
	{
	case INT_MASK_DISABLE:
		CLEAR_BIT(GICR,INT0); break;
    192c:	ab e5       	ldi	r26, 0x5B	; 91
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	eb e5       	ldi	r30, 0x5B	; 91
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 7b       	andi	r24, 0xBF	; 191
    1938:	8c 93       	st	X, r24
    193a:	07 c0       	rjmp	.+14     	; 0x194a <MCAL_GPIO_INT0Init+0x80>
	case INT_MASK_ENABLE:
		SET_BIT(GICR,INT0); break;
    193c:	ab e5       	ldi	r26, 0x5B	; 91
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e5       	ldi	r30, 0x5B	; 91
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	8c 93       	st	X, r24
	}
}
    194a:	26 96       	adiw	r28, 0x06	; 6
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <MCAL_GPIO_INT1Init>:

void MCAL_GPIO_INT1Init(uint8_t a_triggerCase, uint8_t a_IntMask,void (*p_ISR1)(void))
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <MCAL_GPIO_INT1Init+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <MCAL_GPIO_INT1Init+0x8>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <MCAL_GPIO_INT1Init+0xa>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	6a 83       	std	Y+2, r22	; 0x02
    196e:	5c 83       	std	Y+4, r21	; 0x04
    1970:	4b 83       	std	Y+3, r20	; 0x03
	/*Configure PORTD PIN3 as Input for INT0*/
	DDRD &= (~(1<<PD3));
    1972:	a1 e3       	ldi	r26, 0x31	; 49
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e1 e3       	ldi	r30, 0x31	; 49
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	87 7f       	andi	r24, 0xF7	; 247
    197e:	8c 93       	st	X, r24

	/*Configure Trigger Case if Raising or Failing or Both*/
	MCUCR |= ((a_triggerCase & 0x03) << 2);
    1980:	a5 e5       	ldi	r26, 0x55	; 85
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e5       	ldi	r30, 0x55	; 85
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	28 2f       	mov	r18, r24
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	83 70       	andi	r24, 0x03	; 3
    1994:	90 70       	andi	r25, 0x00	; 0
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	82 2b       	or	r24, r18
    19a0:	8c 93       	st	X, r24

	/*Assign The CallBack Function With The User's ISR*/
	gp_CallBack[1] = p_ISR1;
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	90 93 9b 01 	sts	0x019B, r25
    19aa:	80 93 9a 01 	sts	0x019A, r24

	/*Enable/Disable MASK INT0*/
	switch(a_IntMask)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3e 83       	std	Y+6, r19	; 0x06
    19b6:	2d 83       	std	Y+5, r18	; 0x05
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	31 f0       	breq	.+12     	; 0x19cc <MCAL_GPIO_INT1Init+0x70>
    19c0:	2d 81       	ldd	r18, Y+5	; 0x05
    19c2:	3e 81       	ldd	r19, Y+6	; 0x06
    19c4:	21 30       	cpi	r18, 0x01	; 1
    19c6:	31 05       	cpc	r19, r1
    19c8:	49 f0       	breq	.+18     	; 0x19dc <MCAL_GPIO_INT1Init+0x80>
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <MCAL_GPIO_INT1Init+0x8e>
	{
	case INT_MASK_DISABLE:
		CLEAR_BIT(GICR,INT1); break;
    19cc:	ab e5       	ldi	r26, 0x5B	; 91
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	eb e5       	ldi	r30, 0x5B	; 91
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	8c 93       	st	X, r24
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <MCAL_GPIO_INT1Init+0x8e>
	case INT_MASK_ENABLE:
		SET_BIT(GICR,INT1); break;
    19dc:	ab e5       	ldi	r26, 0x5B	; 91
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	eb e5       	ldi	r30, 0x5B	; 91
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	80 68       	ori	r24, 0x80	; 128
    19e8:	8c 93       	st	X, r24
	}
}
    19ea:	26 96       	adiw	r28, 0x06	; 6
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <MCAL_GPIO_INT2Init>:

void MCAL_GPIO_INT2Init(uint8_t a_triggerCase, uint8_t a_IntMask,void (*p_ISR2)(void))
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	28 97       	sbiw	r28, 0x08	; 8
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	6a 83       	std	Y+2, r22	; 0x02
    1a14:	5c 83       	std	Y+4, r21	; 0x04
    1a16:	4b 83       	std	Y+3, r20	; 0x03
	/*Configure PORTB PIN2 as Input for INT2*/
	DDRB &= (~(1<<PB2));
    1a18:	a7 e3       	ldi	r26, 0x37	; 55
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e3       	ldi	r30, 0x37	; 55
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8b 7f       	andi	r24, 0xFB	; 251
    1a24:	8c 93       	st	X, r24

	/*Configure Trigger Case if Raising or Failing or Both*/
	switch(a_triggerCase)
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	38 87       	std	Y+8, r19	; 0x08
    1a2e:	2f 83       	std	Y+7, r18	; 0x07
    1a30:	8f 81       	ldd	r24, Y+7	; 0x07
    1a32:	98 85       	ldd	r25, Y+8	; 0x08
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <MCAL_GPIO_INT2Init+0x4a>
    1a3a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a3c:	38 85       	ldd	r19, Y+8	; 0x08
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	49 f0       	breq	.+18     	; 0x1a56 <MCAL_GPIO_INT2Init+0x5a>
    1a44:	33 c0       	rjmp	.+102    	; 0x1aac <MCAL_GPIO_INT2Init+0xb0>
	{
	case INT_FALLING_TRIG:
		CLEAR_BIT(MCUCSR,ISC2); break;
    1a46:	a4 e5       	ldi	r26, 0x54	; 84
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e4 e5       	ldi	r30, 0x54	; 84
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 7b       	andi	r24, 0xBF	; 191
    1a52:	8c 93       	st	X, r24
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <MCAL_GPIO_INT2Init+0x68>
	case INT_RISING_TRIG:
		SET_BIT(MCUCSR,ISC2); break;
    1a56:	a4 e5       	ldi	r26, 0x54	; 84
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e4 e5       	ldi	r30, 0x54	; 84
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 64       	ori	r24, 0x40	; 64
    1a62:	8c 93       	st	X, r24
	default:
		return;
	}

	/*Assign The CallBack Function With The User's ISR*/
	gp_CallBack[2] = p_ISR2;
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	90 93 9d 01 	sts	0x019D, r25
    1a6c:	80 93 9c 01 	sts	0x019C, r24

	/*Enable/Disable MASK INT2*/
	switch(a_IntMask)
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	3e 83       	std	Y+6, r19	; 0x06
    1a78:	2d 83       	std	Y+5, r18	; 0x05
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	31 f0       	breq	.+12     	; 0x1a8e <MCAL_GPIO_INT2Init+0x92>
    1a82:	2d 81       	ldd	r18, Y+5	; 0x05
    1a84:	3e 81       	ldd	r19, Y+6	; 0x06
    1a86:	21 30       	cpi	r18, 0x01	; 1
    1a88:	31 05       	cpc	r19, r1
    1a8a:	49 f0       	breq	.+18     	; 0x1a9e <MCAL_GPIO_INT2Init+0xa2>
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <MCAL_GPIO_INT2Init+0xb0>
	{
	case INT_MASK_DISABLE:
		CLEAR_BIT(GICR,INT2); break;
    1a8e:	ab e5       	ldi	r26, 0x5B	; 91
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	eb e5       	ldi	r30, 0x5B	; 91
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 7d       	andi	r24, 0xDF	; 223
    1a9a:	8c 93       	st	X, r24
    1a9c:	07 c0       	rjmp	.+14     	; 0x1aac <MCAL_GPIO_INT2Init+0xb0>
	case INT_MASK_ENABLE:
		SET_BIT(GICR,INT2); break;
    1a9e:	ab e5       	ldi	r26, 0x5B	; 91
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	eb e5       	ldi	r30, 0x5B	; 91
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 62       	ori	r24, 0x20	; 32
    1aaa:	8c 93       	st	X, r24
	}
}
    1aac:	28 96       	adiw	r28, 0x08	; 8
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <__vector_1>:

/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/
ISR(INT0_vect)
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	(*gp_CallBack[0])();
    1ae8:	e0 91 98 01 	lds	r30, 0x0198
    1aec:	f0 91 99 01 	lds	r31, 0x0199
    1af0:	09 95       	icall
}
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0f 90       	pop	r0
    1b14:	1f 90       	pop	r1
    1b16:	18 95       	reti

00001b18 <__vector_2>:


ISR(INT1_vect)
{
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	2f 93       	push	r18
    1b24:	3f 93       	push	r19
    1b26:	4f 93       	push	r20
    1b28:	5f 93       	push	r21
    1b2a:	6f 93       	push	r22
    1b2c:	7f 93       	push	r23
    1b2e:	8f 93       	push	r24
    1b30:	9f 93       	push	r25
    1b32:	af 93       	push	r26
    1b34:	bf 93       	push	r27
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
	(*gp_CallBack[1])();
    1b42:	e0 91 9a 01 	lds	r30, 0x019A
    1b46:	f0 91 9b 01 	lds	r31, 0x019B
    1b4a:	09 95       	icall
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <__vector_3>:


ISR(INT2_vect)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	(*gp_CallBack[2])();
    1b9c:	e0 91 9c 01 	lds	r30, 0x019C
    1ba0:	f0 91 9d 01 	lds	r31, 0x019D
    1ba4:	09 95       	icall
}
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	ff 91       	pop	r31
    1bac:	ef 91       	pop	r30
    1bae:	bf 91       	pop	r27
    1bb0:	af 91       	pop	r26
    1bb2:	9f 91       	pop	r25
    1bb4:	8f 91       	pop	r24
    1bb6:	7f 91       	pop	r23
    1bb8:	6f 91       	pop	r22
    1bba:	5f 91       	pop	r21
    1bbc:	4f 91       	pop	r20
    1bbe:	3f 91       	pop	r19
    1bc0:	2f 91       	pop	r18
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <HAL_LCD_Init>:
/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/

void HAL_LCD_Init(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	/* Configure RS Pin */
	MCAL_GPIO_PinInit(LCD_RS_PORT, LCD_RS_PIN,GPIO_PIN_OUTPUT);
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 27 09 	call	0x124e	; 0x124e <MCAL_GPIO_PinInit>

	/* Configure E Pin */
	MCAL_GPIO_PinInit(LCD_E_PORT,LCD_E_PIN, GPIO_PIN_OUTPUT);
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	62 e0       	ldi	r22, 0x02	; 2
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 27 09 	call	0x124e	; 0x124e <MCAL_GPIO_PinInit>

	delay_ms(20);/*Delay for Processing*/
    1be8:	64 e1       	ldi	r22, 0x14	; 20
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>

#if(LCD_DATA_BITS_MODE == 8)

	/* Configure the data port as output port */
	MCAL_GPIO_PortInit(LCD_DATA_PORT, GPIO_PORT_OUTPUT);
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	6f ef       	ldi	r22, 0xFF	; 255
    1bf8:	0e 94 12 0a 	call	0x1424	; 0x1424 <MCAL_GPIO_PortInit>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	HAL_LCD_SendCommand(LCD_CMD_FUNCTION_8BIT_2LINES);
    1bfc:	88 e3       	ldi	r24, 0x38	; 56
    1bfe:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <HAL_LCD_SendCommand>
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	HAL_LCD_SendCommand(LCD_CMD_FUNCTION_4BIT_2LINES);

#endif

	delay_ms(1);/*Delay for Processing*/
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	HAL_LCD_SendCommand(LCD_CMD_ENTRY_MODE);
    1c0e:	86 e0       	ldi	r24, 0x06	; 6
    1c10:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <HAL_LCD_SendCommand>
	delay_ms(1);/*Delay for Processing*/
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	HAL_LCD_SendCommand(LCD_CMD_BEGIN_AT_FIRST_ROW);
    1c20:	80 e8       	ldi	r24, 0x80	; 128
    1c22:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <HAL_LCD_SendCommand>
	delay_ms(1);/*Delay for Processing*/
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	HAL_LCD_SendCommand(LCD_CMD_DISP_ON_CURSOR_BLINK);
    1c32:	8f e0       	ldi	r24, 0x0F	; 15
    1c34:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <HAL_LCD_SendCommand>

}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <HAL_LCD_SendCommand>:


void HAL_LCD_SendCommand(uint8_t a_command)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0f 92       	push	r0
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	89 83       	std	Y+1, r24	; 0x01
	delay_ms(5);/*Delay for Processing*/
    1c4a:	65 e0       	ldi	r22, 0x05	; 5
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);/*RS = 0 Send Command Mode */
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	delay_ms(1);/*Delay for Processing*/
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>

	MCAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);/* Enable LCD E=1 */
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	62 e0       	ldi	r22, 0x02	; 2
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	delay_ms(1);/*Delay for Processing*/
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>

#if(LCD_DATA_BITS_MODE == 8)
	MCAL_GPIO_WritePort(LCD_DATA_PORT, a_command);
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	69 81       	ldd	r22, Y+1	; 0x01
    1c86:	0e 94 21 0c 	call	0x1842	; 0x1842 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DB5_PIN, GET_BIT(a_command,1));
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DB6_PIN, GET_BIT(a_command,2));
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(a_command,3));
#endif

	delay_ms(1);/*Delay for Processing*/
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);/* Disable LCD E=0 */
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	delay_ms(1);/*Delay for Processing*/
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);/* Enable LCD E=1 */
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
}
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <HAL_LCD_DisplayCharacter>:

void HAL_LCD_DisplayCharacter(uint8_t a_data)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	0f 92       	push	r0
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	delay_ms(5);/*Delay for Processing*/
    1cca:	65 e0       	ldi	r22, 0x05	; 5
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);/*RS = 1 Data Mode */
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	delay_ms(1);/*Delay for Processing*/
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>

	MCAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);/* Enable LCD E=1 */
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	62 e0       	ldi	r22, 0x02	; 2
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	delay_ms(1);/*Delay for Processing*/
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>

#if(LCD_DATA_BITS_MODE == 8)
	MCAL_GPIO_WritePort(LCD_DATA_PORT, a_data);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	69 81       	ldd	r22, Y+1	; 0x01
    1d06:	0e 94 21 0c 	call	0x1842	; 0x1842 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DB5_PIN, GET_BIT(a_data,1));
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DB6_PIN, GET_BIT(a_data,2));
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(a_data,3));
#endif

	delay_ms(1);/*Delay for Processing*/
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);/* Disable LCD E=0 */
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
	delay_ms(1);/*Delay for Processing*/
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <delay_ms>
	MCAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);/* Enable LCD E=1 */
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <MCAL_GPIO_WritePin>
}
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <HAL_LCD_DisplayString>:

void HAL_LCD_DisplayString(const uint8_t * p_str)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <HAL_LCD_DisplayString+0x6>
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	9b 83       	std	Y+3, r25	; 0x03
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t count = 0;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
    1d50:	1c c0       	rjmp	.+56     	; 0x1d8a <HAL_LCD_DisplayString+0x4c>

	while((*p_str) != '\0')
	{
		HAL_LCD_DisplayCharacter((*p_str));
    1d52:	ea 81       	ldd	r30, Y+2	; 0x02
    1d54:	fb 81       	ldd	r31, Y+3	; 0x03
    1d56:	80 81       	ld	r24, Z
    1d58:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <HAL_LCD_DisplayCharacter>
		p_str++;
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02

		if(count == 16)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	80 31       	cpi	r24, 0x10	; 16
    1d6a:	29 f4       	brne	.+10     	; 0x1d76 <HAL_LCD_DisplayString+0x38>
		{
			HAL_LCD_MoveCursor(1,0);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <HAL_LCD_MoveCursor>
    1d74:	0a c0       	rjmp	.+20     	; 0x1d8a <HAL_LCD_DisplayString+0x4c>
		}
		else if(count == 32)
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	80 32       	cpi	r24, 0x20	; 32
    1d7a:	39 f4       	brne	.+14     	; 0x1d8a <HAL_LCD_DisplayString+0x4c>
		{
			HAL_LCD_ClearScreen();
    1d7c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <HAL_LCD_ClearScreen>
			HAL_LCD_MoveCursor(0,0);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <HAL_LCD_MoveCursor>
			count = 0;
    1d88:	19 82       	std	Y+1, r1	; 0x01

void HAL_LCD_DisplayString(const uint8_t * p_str)
{
	uint8_t count = 0;

	while((*p_str) != '\0')
    1d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 23       	and	r24, r24
    1d92:	f9 f6       	brne	.-66     	; 0x1d52 <HAL_LCD_DisplayString+0x14>
			HAL_LCD_ClearScreen();
			HAL_LCD_MoveCursor(0,0);
			count = 0;
		}
	}
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <HAL_LCD_MoveCursor>:

void HAL_LCD_MoveCursor(uint8_t a_row,uint8_t a_col)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <HAL_LCD_MoveCursor+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <HAL_LCD_MoveCursor+0x8>
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	8a 83       	std	Y+2, r24	; 0x02
    1db0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(a_row)
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	3d 83       	std	Y+5, r19	; 0x05
    1dba:	2c 83       	std	Y+4, r18	; 0x04
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	c1 f0       	breq	.+48     	; 0x1df6 <HAL_LCD_MoveCursor+0x56>
    1dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	2c f4       	brge	.+10     	; 0x1dda <HAL_LCD_MoveCursor+0x3a>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	61 f0       	breq	.+24     	; 0x1df0 <HAL_LCD_MoveCursor+0x50>
    1dd8:	19 c0       	rjmp	.+50     	; 0x1e0c <HAL_LCD_MoveCursor+0x6c>
    1dda:	2c 81       	ldd	r18, Y+4	; 0x04
    1ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <HAL_LCD_MoveCursor+0x5e>
    1de4:	8c 81       	ldd	r24, Y+4	; 0x04
    1de6:	9d 81       	ldd	r25, Y+5	; 0x05
    1de8:	83 30       	cpi	r24, 0x03	; 3
    1dea:	91 05       	cpc	r25, r1
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <HAL_LCD_MoveCursor+0x66>
    1dee:	0e c0       	rjmp	.+28     	; 0x1e0c <HAL_LCD_MoveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=a_col;
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	0b c0       	rjmp	.+22     	; 0x1e0c <HAL_LCD_MoveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=a_col+0x40;
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	80 5c       	subi	r24, 0xC0	; 192
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <HAL_LCD_MoveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=a_col+0x10;
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	80 5f       	subi	r24, 0xF0	; 240
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <HAL_LCD_MoveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=a_col+0x50;
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	80 5b       	subi	r24, 0xB0	; 176
    1e0a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move the LCD cursor to this specific address */
	HAL_LCD_SendCommand((lcd_memory_address | LCD_CMD_BEGIN_AT_FIRST_ROW));
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <HAL_LCD_SendCommand>
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <HAL_LCD_DisplayStringRowCol>:

void HAL_LCD_DisplayStringRowCol(uint8_t a_row,uint8_t a_col,const uint8_t * p_str)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <HAL_LCD_DisplayStringRowCol+0x6>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <HAL_LCD_DisplayStringRowCol+0x8>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	6a 83       	std	Y+2, r22	; 0x02
    1e34:	5c 83       	std	Y+4, r21	; 0x04
    1e36:	4b 83       	std	Y+3, r20	; 0x03
	HAL_LCD_MoveCursor(a_row, a_col);
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e3c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <HAL_LCD_MoveCursor>
	HAL_LCD_DisplayString(p_str);
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <HAL_LCD_DisplayString>
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <HAL_LCD_ClearScreen>:

void HAL_LCD_ClearScreen(void)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	HAL_LCD_SendCommand(LCD_CMD_CLEAR_SCREEN);
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <HAL_LCD_SendCommand>
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <HAL_LCD_IntgerToString>:

void HAL_LCD_IntgerToString(uint32_t a_data)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	64 97       	sbiw	r28, 0x14	; 20
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	69 8b       	std	Y+17, r22	; 0x11
    1e80:	7a 8b       	std	Y+18, r23	; 0x12
    1e82:	8b 8b       	std	Y+19, r24	; 0x13
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
	uint8_t buffer[16];
	itoa(a_data,buffer,10); /*The function ltoa() converts the long integer value from val into an ASCII representation*/
    1e86:	89 89       	ldd	r24, Y+17	; 0x11
    1e88:	9a 89       	ldd	r25, Y+18	; 0x12
    1e8a:	9e 01       	movw	r18, r28
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	b9 01       	movw	r22, r18
    1e92:	4a e0       	ldi	r20, 0x0A	; 10
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	0e 94 bb 11 	call	0x2376	; 0x2376 <itoa>
	HAL_LCD_DisplayString(buffer);
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <HAL_LCD_DisplayString>
}
    1ea2:	64 96       	adiw	r28, 0x14	; 20
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <delay_ms>:

static void delay_ms(uint32_t delay)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	2c 97       	sbiw	r28, 0x0c	; 12
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	69 87       	std	Y+9, r22	; 0x09
    1eca:	7a 87       	std	Y+10, r23	; 0x0a
    1ecc:	8b 87       	std	Y+11, r24	; 0x0b
    1ece:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i, j;
	for (i = 0; i < delay; i++)
    1ed0:	1d 82       	std	Y+5, r1	; 0x05
    1ed2:	1e 82       	std	Y+6, r1	; 0x06
    1ed4:	1f 82       	std	Y+7, r1	; 0x07
    1ed6:	18 86       	std	Y+8, r1	; 0x08
    1ed8:	24 c0       	rjmp	.+72     	; 0x1f22 <delay_ms+0x6e>
	{
		for (j = 0; j < 255; j++);
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	1a 82       	std	Y+2, r1	; 0x02
    1ede:	1b 82       	std	Y+3, r1	; 0x03
    1ee0:	1c 82       	std	Y+4, r1	; 0x04
    1ee2:	0b c0       	rjmp	.+22     	; 0x1efa <delay_ms+0x46>
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eea:	bc 81       	ldd	r27, Y+4	; 0x04
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	b1 1d       	adc	r27, r1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	ab 83       	std	Y+3, r26	; 0x03
    1ef8:	bc 83       	std	Y+4, r27	; 0x04
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	ab 81       	ldd	r26, Y+3	; 0x03
    1f00:	bc 81       	ldd	r27, Y+4	; 0x04
    1f02:	8f 3f       	cpi	r24, 0xFF	; 255
    1f04:	91 05       	cpc	r25, r1
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	60 f3       	brcs	.-40     	; 0x1ee4 <delay_ms+0x30>
}

static void delay_ms(uint32_t delay)
{
	uint32_t i, j;
	for (i = 0; i < delay; i++)
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	af 81       	ldd	r26, Y+7	; 0x07
    1f12:	b8 85       	ldd	r27, Y+8	; 0x08
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	a1 1d       	adc	r26, r1
    1f18:	b1 1d       	adc	r27, r1
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	af 83       	std	Y+7, r26	; 0x07
    1f20:	b8 87       	std	Y+8, r27	; 0x08
    1f22:	2d 81       	ldd	r18, Y+5	; 0x05
    1f24:	3e 81       	ldd	r19, Y+6	; 0x06
    1f26:	4f 81       	ldd	r20, Y+7	; 0x07
    1f28:	58 85       	ldd	r21, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f30:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f32:	28 17       	cp	r18, r24
    1f34:	39 07       	cpc	r19, r25
    1f36:	4a 07       	cpc	r20, r26
    1f38:	5b 07       	cpc	r21, r27
    1f3a:	78 f2       	brcs	.-98     	; 0x1eda <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
	}
}
    1f3c:	2c 96       	adiw	r28, 0x0c	; 12
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <HAL_LM35_ADC_Init>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void HAL_LM35_ADC_Init(void)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <HAL_LM35_ADC_Init+0x6>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	ADC_Config_t config;
	config.VoltRef = ADC_INTERNAL_Vref;
    1f58:	80 ec       	ldi	r24, 0xC0	; 192
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	config.Prescaler = ADC_PRESCALE_8;
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_ADC_Init(&config);
    1f60:	ce 01       	movw	r24, r28
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	0e 94 17 07 	call	0xe2e	; 0xe2e <MCAL_ADC_Init>
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <HAL_LM35_GetTemp>:

uint8_t HAL_LM35_GetTemp(void)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <HAL_LM35_GetTemp+0x6>
    1f78:	0f 92       	push	r0
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
	uint16_t adc_value = 0;
    1f7e:	1b 82       	std	Y+3, r1	; 0x03
    1f80:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t temp = 0;
    1f82:	19 82       	std	Y+1, r1	; 0x01

	adc_value = MCAL_ADC_ReadChannel(LM35_CHANNEL);
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	0e 94 31 07 	call	0xe62	; 0xe62 <MCAL_ADC_ReadChannel>
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	8a 83       	std	Y+2, r24	; 0x02

	temp = (uint8_t)(((uint32_t)adc_value * LM35_MAX_TEMP * 2.56)/(1023 * LM35_MAX_VOLT));
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	cc 01       	movw	r24, r24
    1f94:	a0 e0       	ldi	r26, 0x00	; 0
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	26 e9       	ldi	r18, 0x96	; 150
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 65 11 	call	0x22ca	; 0x22ca <__mulsi3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	2a e0       	ldi	r18, 0x0A	; 10
    1fbe:	37 ed       	ldi	r19, 0xD7	; 215
    1fc0:	43 e2       	ldi	r20, 0x23	; 35
    1fc2:	50 e4       	ldi	r21, 0x40	; 64
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 ed       	ldi	r19, 0xD0	; 208
    1fd4:	4f eb       	ldi	r20, 0xBF	; 191
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	89 83       	std	Y+1, r24	; 0x01

	return temp;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <MCAL_TIMER0_PWMInit>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void MCAL_TIMER0_PWMInit(uint8_t a_prescaler)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	89 83       	std	Y+1, r24	; 0x01
	/* Configure The OC0 Pin as Output */
	SET_BIT(DDRB,3);
    2008:	a7 e3       	ldi	r26, 0x37	; 55
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e7 e3       	ldi	r30, 0x37	; 55
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	88 60       	ori	r24, 0x08	; 8
    2014:	8c 93       	st	X, r24

	/* Set The Timer Initial Value to 0 */
	TCNT0 = 0;
    2016:	e2 e5       	ldi	r30, 0x52	; 82
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1

	/* Configure the FAST PWM,Non inverting Mode, Prescsaler */
	TCCR0 = (0x68) | (a_prescaler);
    201c:	e3 e5       	ldi	r30, 0x53	; 83
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	88 66       	ori	r24, 0x68	; 104
    2024:	80 83       	st	Z, r24
}
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <MCAL_TIMER1_PWMInit>:


void MCAL_TIMER1_PWMInit(uint8_t a_prescaler,uint16_t a_top, uint8_t a_pin)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <MCAL_TIMER1_PWMInit+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <MCAL_TIMER1_PWMInit+0x8>
    2036:	00 d0       	rcall	.+0      	; 0x2038 <MCAL_TIMER1_PWMInit+0xa>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	7b 83       	std	Y+3, r23	; 0x03
    2040:	6a 83       	std	Y+2, r22	; 0x02
    2042:	4c 83       	std	Y+4, r20	; 0x04
	/* Set The Timer Initial Value to 0 */
	TCNT1 = 0;
    2044:	ec e4       	ldi	r30, 0x4C	; 76
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	11 82       	std	Z+1, r1	; 0x01
    204a:	10 82       	st	Z, r1

	/*Set TOP Count For Timer1 in ICR1 Register*/
	ICR1 = a_top;
    204c:	e6 e4       	ldi	r30, 0x46	; 70
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24

	/* Configure The OC1A/OC1B Pins as Output */
	switch(a_pin)
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3e 83       	std	Y+6, r19	; 0x06
    2060:	2d 83       	std	Y+5, r18	; 0x05
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	80 38       	cpi	r24, 0x80	; 128
    2068:	91 05       	cpc	r25, r1
    206a:	59 f0       	breq	.+22     	; 0x2082 <MCAL_TIMER1_PWMInit+0x54>
    206c:	2d 81       	ldd	r18, Y+5	; 0x05
    206e:	3e 81       	ldd	r19, Y+6	; 0x06
    2070:	20 3a       	cpi	r18, 0xA0	; 160
    2072:	31 05       	cpc	r19, r1
    2074:	b1 f0       	breq	.+44     	; 0x20a2 <MCAL_TIMER1_PWMInit+0x74>
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	80 32       	cpi	r24, 0x20	; 32
    207c:	91 05       	cpc	r25, r1
    207e:	49 f0       	breq	.+18     	; 0x2092 <MCAL_TIMER1_PWMInit+0x64>
    2080:	1e c0       	rjmp	.+60     	; 0x20be <MCAL_TIMER1_PWMInit+0x90>
	{
	case PWM_OC1A:
		SET_BIT(DDRD,5);
    2082:	a1 e3       	ldi	r26, 0x31	; 49
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e1 e3       	ldi	r30, 0x31	; 49
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	80 62       	ori	r24, 0x20	; 32
    208e:	8c 93       	st	X, r24
    2090:	16 c0       	rjmp	.+44     	; 0x20be <MCAL_TIMER1_PWMInit+0x90>
		break;

	case PWM_OC1B:
		SET_BIT(DDRD,4);
    2092:	a1 e3       	ldi	r26, 0x31	; 49
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e1 e3       	ldi	r30, 0x31	; 49
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 61       	ori	r24, 0x10	; 16
    209e:	8c 93       	st	X, r24
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <MCAL_TIMER1_PWMInit+0x90>
		break;

	case PWM_OC1AB:
		SET_BIT(DDRD,4);
    20a2:	a1 e3       	ldi	r26, 0x31	; 49
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e1 e3       	ldi	r30, 0x31	; 49
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	80 61       	ori	r24, 0x10	; 16
    20ae:	8c 93       	st	X, r24
		SET_BIT(DDRD,5);
    20b0:	a1 e3       	ldi	r26, 0x31	; 49
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e1 e3       	ldi	r30, 0x31	; 49
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 62       	ori	r24, 0x20	; 32
    20bc:	8c 93       	st	X, r24
		break;
	}

	/* Configure the FAST PWM,Non inverting Mode, Prescsaler */
	TCCR1A = (0x02) | (a_pin);
    20be:	ef e4       	ldi	r30, 0x4F	; 79
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	82 60       	ori	r24, 0x02	; 2
    20c6:	80 83       	st	Z, r24
	TCCR1B = (0x18) | (a_prescaler);
    20c8:	ee e4       	ldi	r30, 0x4E	; 78
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	88 61       	ori	r24, 0x18	; 24
    20d0:	80 83       	st	Z, r24
}
    20d2:	26 96       	adiw	r28, 0x06	; 6
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <MCAL_TIMER2_PWMInit>:


void MCAL_TIMER2_PWMInit(uint8_t a_prescaler)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	0f 92       	push	r0
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	89 83       	std	Y+1, r24	; 0x01
	/* Configure The OC2 Pin as Output */
	SET_BIT(DDRD,7);
    20f0:	a1 e3       	ldi	r26, 0x31	; 49
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e1 e3       	ldi	r30, 0x31	; 49
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	80 68       	ori	r24, 0x80	; 128
    20fc:	8c 93       	st	X, r24

	/* Set The Timer Initial Value to 0 */
	TCNT2 = 0;
    20fe:	e4 e4       	ldi	r30, 0x44	; 68
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	10 82       	st	Z, r1

	/* Configure the FAST PWM,Non inverting Mode, /8 Prescsaler */
	TCCR2 = (0x68) | (a_prescaler);
    2104:	e5 e4       	ldi	r30, 0x45	; 69
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	88 66       	ori	r24, 0x68	; 104
    210c:	80 83       	st	Z, r24
}
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <MCAL_TIMER0_PWMSetDuty>:


void MCAL_TIMER0_PWMSetDuty(uint8_t a_duty)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <MCAL_TIMER0_PWMSetDuty+0x6>
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t OCR_value = 0;
    2122:	19 82       	std	Y+1, r1	; 0x01
	OCR_value = (((float32)a_duty/100)*255);
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e0       	ldi	r26, 0x00	; 0
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	48 ec       	ldi	r20, 0xC8	; 200
    2144:	52 e4       	ldi	r21, 0x42	; 66
    2146:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = OCR_value;
    2170:	ec e5       	ldi	r30, 0x5C	; 92
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	80 83       	st	Z, r24
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <MCAL_TIMER1_PWMSetDuty>:


void MCAL_TIMER1_PWMSetDuty(uint16_t a_duty, uint8_t a_pin)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	27 97       	sbiw	r28, 0x07	; 7
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t OCR_value = 0;
    219c:	1a 82       	std	Y+2, r1	; 0x02
    219e:	19 82       	std	Y+1, r1	; 0x01
	OCR_value = (((float32)a_duty/100)*65535);
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	9c 81       	ldd	r25, Y+4	; 0x04
    21a4:	cc 01       	movw	r24, r24
    21a6:	a0 e0       	ldi	r26, 0x00	; 0
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	48 ec       	ldi	r20, 0xC8	; 200
    21c0:	52 e4       	ldi	r21, 0x42	; 66
    21c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01

	switch(a_pin)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	3f 83       	std	Y+7, r19	; 0x07
    21f6:	2e 83       	std	Y+6, r18	; 0x06
    21f8:	8e 81       	ldd	r24, Y+6	; 0x06
    21fa:	9f 81       	ldd	r25, Y+7	; 0x07
    21fc:	80 38       	cpi	r24, 0x80	; 128
    21fe:	91 05       	cpc	r25, r1
    2200:	59 f0       	breq	.+22     	; 0x2218 <MCAL_TIMER1_PWMSetDuty+0x96>
    2202:	2e 81       	ldd	r18, Y+6	; 0x06
    2204:	3f 81       	ldd	r19, Y+7	; 0x07
    2206:	20 3a       	cpi	r18, 0xA0	; 160
    2208:	31 05       	cpc	r19, r1
    220a:	a1 f0       	breq	.+40     	; 0x2234 <MCAL_TIMER1_PWMSetDuty+0xb2>
    220c:	8e 81       	ldd	r24, Y+6	; 0x06
    220e:	9f 81       	ldd	r25, Y+7	; 0x07
    2210:	80 32       	cpi	r24, 0x20	; 32
    2212:	91 05       	cpc	r25, r1
    2214:	41 f0       	breq	.+16     	; 0x2226 <MCAL_TIMER1_PWMSetDuty+0xa4>
    2216:	1a c0       	rjmp	.+52     	; 0x224c <MCAL_TIMER1_PWMSetDuty+0xca>
	{
	case PWM_OC1A:
		OCR1A = OCR_value; break;
    2218:	ea e4       	ldi	r30, 0x4A	; 74
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	80 83       	st	Z, r24
    2224:	13 c0       	rjmp	.+38     	; 0x224c <MCAL_TIMER1_PWMSetDuty+0xca>
	case PWM_OC1B:
		OCR1B = OCR_value; break;
    2226:	e8 e4       	ldi	r30, 0x48	; 72
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	0c c0       	rjmp	.+24     	; 0x224c <MCAL_TIMER1_PWMSetDuty+0xca>
	case PWM_OC1AB:
		OCR1B = OCR_value;
    2234:	e8 e4       	ldi	r30, 0x48	; 72
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
		OCR1A = OCR_value;
    2240:	ea e4       	ldi	r30, 0x4A	; 74
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
		break;
	}
}
    224c:	27 96       	adiw	r28, 0x07	; 7
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <MCAL_TIMER2_PWMSetDuty>:


void MCAL_TIMER2_PWMSetDuty(uint8_t a_duty)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	00 d0       	rcall	.+0      	; 0x2264 <MCAL_TIMER2_PWMSetDuty+0x6>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t OCR_value = 0;
    226a:	19 82       	std	Y+1, r1	; 0x01
	OCR_value = (((float32)a_duty/100)*255);
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	48 ec       	ldi	r20, 0xC8	; 200
    228c:	52 e4       	ldi	r21, 0x42	; 66
    228e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	53 e4       	ldi	r21, 0x43	; 67
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = OCR_value;
    22b8:	e3 e4       	ldi	r30, 0x43	; 67
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	80 83       	st	Z, r24
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <__mulsi3>:
    22ca:	62 9f       	mul	r22, r18
    22cc:	d0 01       	movw	r26, r0
    22ce:	73 9f       	mul	r23, r19
    22d0:	f0 01       	movw	r30, r0
    22d2:	82 9f       	mul	r24, r18
    22d4:	e0 0d       	add	r30, r0
    22d6:	f1 1d       	adc	r31, r1
    22d8:	64 9f       	mul	r22, r20
    22da:	e0 0d       	add	r30, r0
    22dc:	f1 1d       	adc	r31, r1
    22de:	92 9f       	mul	r25, r18
    22e0:	f0 0d       	add	r31, r0
    22e2:	83 9f       	mul	r24, r19
    22e4:	f0 0d       	add	r31, r0
    22e6:	74 9f       	mul	r23, r20
    22e8:	f0 0d       	add	r31, r0
    22ea:	65 9f       	mul	r22, r21
    22ec:	f0 0d       	add	r31, r0
    22ee:	99 27       	eor	r25, r25
    22f0:	72 9f       	mul	r23, r18
    22f2:	b0 0d       	add	r27, r0
    22f4:	e1 1d       	adc	r30, r1
    22f6:	f9 1f       	adc	r31, r25
    22f8:	63 9f       	mul	r22, r19
    22fa:	b0 0d       	add	r27, r0
    22fc:	e1 1d       	adc	r30, r1
    22fe:	f9 1f       	adc	r31, r25
    2300:	bd 01       	movw	r22, r26
    2302:	cf 01       	movw	r24, r30
    2304:	11 24       	eor	r1, r1
    2306:	08 95       	ret

00002308 <__prologue_saves__>:
    2308:	2f 92       	push	r2
    230a:	3f 92       	push	r3
    230c:	4f 92       	push	r4
    230e:	5f 92       	push	r5
    2310:	6f 92       	push	r6
    2312:	7f 92       	push	r7
    2314:	8f 92       	push	r8
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	ca 1b       	sub	r28, r26
    2332:	db 0b       	sbc	r29, r27
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	09 94       	ijmp

00002340 <__epilogue_restores__>:
    2340:	2a 88       	ldd	r2, Y+18	; 0x12
    2342:	39 88       	ldd	r3, Y+17	; 0x11
    2344:	48 88       	ldd	r4, Y+16	; 0x10
    2346:	5f 84       	ldd	r5, Y+15	; 0x0f
    2348:	6e 84       	ldd	r6, Y+14	; 0x0e
    234a:	7d 84       	ldd	r7, Y+13	; 0x0d
    234c:	8c 84       	ldd	r8, Y+12	; 0x0c
    234e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2350:	aa 84       	ldd	r10, Y+10	; 0x0a
    2352:	b9 84       	ldd	r11, Y+9	; 0x09
    2354:	c8 84       	ldd	r12, Y+8	; 0x08
    2356:	df 80       	ldd	r13, Y+7	; 0x07
    2358:	ee 80       	ldd	r14, Y+6	; 0x06
    235a:	fd 80       	ldd	r15, Y+5	; 0x05
    235c:	0c 81       	ldd	r16, Y+4	; 0x04
    235e:	1b 81       	ldd	r17, Y+3	; 0x03
    2360:	aa 81       	ldd	r26, Y+2	; 0x02
    2362:	b9 81       	ldd	r27, Y+1	; 0x01
    2364:	ce 0f       	add	r28, r30
    2366:	d1 1d       	adc	r29, r1
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	ed 01       	movw	r28, r26
    2374:	08 95       	ret

00002376 <itoa>:
    2376:	fb 01       	movw	r30, r22
    2378:	9f 01       	movw	r18, r30
    237a:	e8 94       	clt
    237c:	42 30       	cpi	r20, 0x02	; 2
    237e:	c4 f0       	brlt	.+48     	; 0x23b0 <itoa+0x3a>
    2380:	45 32       	cpi	r20, 0x25	; 37
    2382:	b4 f4       	brge	.+44     	; 0x23b0 <itoa+0x3a>
    2384:	4a 30       	cpi	r20, 0x0A	; 10
    2386:	29 f4       	brne	.+10     	; 0x2392 <itoa+0x1c>
    2388:	97 fb       	bst	r25, 7
    238a:	1e f4       	brtc	.+6      	; 0x2392 <itoa+0x1c>
    238c:	90 95       	com	r25
    238e:	81 95       	neg	r24
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	64 2f       	mov	r22, r20
    2394:	77 27       	eor	r23, r23
    2396:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__udivmodhi4>
    239a:	80 5d       	subi	r24, 0xD0	; 208
    239c:	8a 33       	cpi	r24, 0x3A	; 58
    239e:	0c f0       	brlt	.+2      	; 0x23a2 <itoa+0x2c>
    23a0:	89 5d       	subi	r24, 0xD9	; 217
    23a2:	81 93       	st	Z+, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	a1 f7       	brne	.-24     	; 0x2392 <itoa+0x1c>
    23aa:	16 f4       	brtc	.+4      	; 0x23b0 <itoa+0x3a>
    23ac:	5d e2       	ldi	r21, 0x2D	; 45
    23ae:	51 93       	st	Z+, r21
    23b0:	10 82       	st	Z, r1
    23b2:	c9 01       	movw	r24, r18
    23b4:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <strrev>

000023b8 <strrev>:
    23b8:	dc 01       	movw	r26, r24
    23ba:	fc 01       	movw	r30, r24
    23bc:	67 2f       	mov	r22, r23
    23be:	71 91       	ld	r23, Z+
    23c0:	77 23       	and	r23, r23
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <strrev+0x4>
    23c4:	32 97       	sbiw	r30, 0x02	; 2
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <strrev+0x18>
    23c8:	7c 91       	ld	r23, X
    23ca:	6d 93       	st	X+, r22
    23cc:	70 83       	st	Z, r23
    23ce:	62 91       	ld	r22, -Z
    23d0:	ae 17       	cp	r26, r30
    23d2:	bf 07       	cpc	r27, r31
    23d4:	c8 f3       	brcs	.-14     	; 0x23c8 <strrev+0x10>
    23d6:	08 95       	ret

000023d8 <__udivmodhi4>:
    23d8:	aa 1b       	sub	r26, r26
    23da:	bb 1b       	sub	r27, r27
    23dc:	51 e1       	ldi	r21, 0x11	; 17
    23de:	07 c0       	rjmp	.+14     	; 0x23ee <__udivmodhi4_ep>

000023e0 <__udivmodhi4_loop>:
    23e0:	aa 1f       	adc	r26, r26
    23e2:	bb 1f       	adc	r27, r27
    23e4:	a6 17       	cp	r26, r22
    23e6:	b7 07       	cpc	r27, r23
    23e8:	10 f0       	brcs	.+4      	; 0x23ee <__udivmodhi4_ep>
    23ea:	a6 1b       	sub	r26, r22
    23ec:	b7 0b       	sbc	r27, r23

000023ee <__udivmodhi4_ep>:
    23ee:	88 1f       	adc	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	5a 95       	dec	r21
    23f4:	a9 f7       	brne	.-22     	; 0x23e0 <__udivmodhi4_loop>
    23f6:	80 95       	com	r24
    23f8:	90 95       	com	r25
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	08 95       	ret

00002400 <_exit>:
    2400:	f8 94       	cli

00002402 <__stop_program>:
    2402:	ff cf       	rjmp	.-2      	; 0x2402 <__stop_program>
